
namespace T

open SturmovikMission.DataProvider
open SturmovikMission.DataProvider.Ast
open MBrace.FsPickler

/// The base type of all provided types representing objects found in a mission file, wraps an Ast.Value
type AstValueWrapper(value : Ast.Value) =
    member this.Wrapped = value

/// The base type of the result of parsing a mission file
type GroupMembers(items : SturmovikMission.DataProvider.Ast.Data list) =
    member this.Items = items

    

type Boolean(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : bool =
        this.Wrapped.GetBool()

    static member N(value : bool) : Boolean =
        let value =
            Ast.Value.Boolean(value)
        Boolean(value)

    static member Default : Boolean =
        let value =
            Ast.Value.Boolean false
        Boolean(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Boolean</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Date(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Year : int =
        let _, _, year = this.Wrapped.GetDate()
        year

    member this.Month : int =
        let _, month, _ = this.Wrapped.GetDate()
        month

    member this.Day : int =
        let day, _, _ = this.Wrapped.GetDate()
        day

    static member FromDate(day : int, month : int, year : int) : Date =
        let value =
            Ast.Value.Date(day, month, year)
        Date(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Date</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Float(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : float =
        this.Wrapped.GetFloat()

    static member N(value : float) : Float =
        let value =
            Ast.Value.Float(value)
        Float(value)

    static member Default : Float =
        let value =
            Ast.Value.Float 0.0
        Float(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Float</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type FloatPair(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : float * float =
        this.Wrapped.GetFloatPair()

    static member N(value : float * float) : FloatPair =
        let value =
            Ast.Value.FloatPair(value)
        FloatPair(value)

    static member Default : FloatPair =
        let value =
            Ast.Value.FloatPair(0.0, 0.0)
        FloatPair(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>FloatPair</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type VectorOfIntegers(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : int list =
        this.Wrapped.GetIntVector()

    static member N(value : int list) : VectorOfIntegers =
        let value =
            Ast.Value.IntVector value
        VectorOfIntegers(value)

    static member Default : VectorOfIntegers =
        let value =
            Ast.Value.IntVector []
        VectorOfIntegers(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>IntVector</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Integer(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : int =
        this.Wrapped.GetInteger()

    static member N(value : int) : Integer =
        let value =
            Ast.Value.Integer value
        Integer(value)

    static member Default : Integer =
        let value =
            Ast.Value.Integer 0
        Integer(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Integer</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Mask(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : int64 =
        this.Wrapped.GetMask()

    static member N(value : int64) : Mask =
        let value =
            Ast.Value.Mask value
        Mask(value)

    static member Default : Mask =
        let value =
            Ast.Value.Mask 0L
        Mask(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mask</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type String(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.Value : string =
        this.Wrapped.GetString()

    static member N(value : string) : String =
        let value =
            Ast.Value.String value
        String(value)

    static member Default : String =
        let value =
            Ast.Value.String ""
        String(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>String</Case></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module Airfield =

    module Chart =


        type Point(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetType() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Type") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Type' is not set"
                    )

            member this.GetX() : Float =
                Float 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "X") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'X' is not set"
                    )

            member this.GetY() : Float =
                Float 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Y") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Y' is not set"
                    )

            member this.SetType(value : Integer) : Point =
                Point(this.Wrapped.SetItem("Type", value.Wrapped))

            member this.SetX(value : Float) : Point =
                Point(this.Wrapped.SetItem("X", value.Wrapped))

            member this.SetY(value : Float) : Point =
                Point(this.Wrapped.SetItem("Y", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("Point") then
                        let s = Parsing.SubString(data, offset + 5)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'Point'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "Point " + (Ast.dump this.Wrapped)

            static member Default : Point =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                Point(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type Chart(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetPoints() : Chart.Point seq =
            let fields =
                (this.Wrapped : Ast.Value).GetItems()
            fields
            |> List.choose (fun (name, x) -> if name = "Point" then Some x else None)
            |> Seq.map (fun x ->
                Chart.Point (x)
            )

        member this.SetPoint(value : Chart.Point seq) : Chart =
            let xs = value |> Seq.map (fun x -> x.Wrapped)
            let res = this.Wrapped.ClearItems("Point").AddItems("Point", List.ofSeq xs)
            Chart(res)

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("Chart") then
                    let s = Parsing.SubString(data, offset + 5)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'Chart'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "Chart " + (Ast.dump this.Wrapped)

        static member Default : Chart =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Chart(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


    type Damaged(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        static member FromMap(map : Map<int, Float>) : Damaged =
            let value =
                map
                |> Map.map (fun _ v -> v.Wrapped)
                |> Map.toList
                |> Ast.Value.Mapping
            Damaged(value)

        member this.Value : Map<int, Float> =
            Map.ofList(this.Wrapped.GetMapping())
            |> Map.map (fun _ x ->
                Float (x)
            )

        member this.SetItem(key : int, value : Float) : Damaged =
            Damaged (this.Wrapped.SetItem(key, value.Wrapped))

        member this.RemoveItem(key : int) : Damaged =
            Damaged (this.Wrapped.RemoveItem(key))

        member this.Clear() : Damaged =
            Damaged (Ast.Value.Mapping [])

        static member Default : Damaged =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mapping</Case><Item><Case>Float</Case></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Damaged(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mapping</Case><Item><Case>Float</Case></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)

    module Planes =


        type Plane(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetAILevel() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AILevel") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AILevel' is not set"
                    )

            member this.GetAIRTBDecision() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AIRTBDecision") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AIRTBDecision' is not set"
                    )

            member this.GetAltitude() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Altitude") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Altitude' is not set"
                    )

            member this.GetAvMods() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AvMods") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AvMods' is not set"
                    )

            member this.GetAvPayloads() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AvPayloads") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AvPayloads' is not set"
                    )

            member this.GetAvSkins() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AvSkins") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AvSkins' is not set"
                    )

            member this.GetCallnum() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Callnum") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Callnum' is not set"
                    )

            member this.GetCallsign() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Callsign") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Callsign' is not set"
                    )

            member this.GetEngageable() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Engageable") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Engageable' is not set"
                    )

            member this.GetFuel() : Float =
                Float 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Fuel") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Fuel' is not set"
                    )

            member this.GetLimitAmmo() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'LimitAmmo' is not set"
                    )

            member this.GetModel() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Model") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Model' is not set"
                    )

            member this.GetName() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Name") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Name' is not set"
                    )

            member this.GetNumber() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Number") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Number' is not set"
                    )

            member this.GetPayloadId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "PayloadId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'PayloadId' is not set"
                    )

            member this.GetRenewTime() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "RenewTime") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'RenewTime' is not set"
                    )

            member this.GetRenewable() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Renewable") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Renewable' is not set"
                    )

            member this.GetRouteTime() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "RouteTime") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'RouteTime' is not set"
                    )

            member this.GetScript() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Script") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Script' is not set"
                    )

            member this.GetSetIndex() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "SetIndex") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'SetIndex' is not set"
                    )

            member this.GetSkin() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Skin") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Skin' is not set"
                    )

            member this.GetSpotter() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Spotter") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Spotter' is not set"
                    )

            member this.GetStartInAir() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "StartInAir") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'StartInAir' is not set"
                    )

            member this.GetTCode() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TCode") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TCode' is not set"
                    )

            member this.GetTCodeColors() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TCodeColors") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TCodeColors' is not set"
                    )

            member this.GetVulnerable() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Vulnerable' is not set"
                    )

            member this.GetWMMask() : Mask =
                Mask 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "WMMask") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'WMMask' is not set"
                    )

            member this.SetAILevel(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("AILevel", value.Wrapped))

            member this.SetAIRTBDecision(value : Boolean) : Plane =
                Plane(this.Wrapped.SetItem("AIRTBDecision", value.Wrapped))

            member this.SetAltitude(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("Altitude", value.Wrapped))

            member this.SetAvMods(value : String) : Plane =
                Plane(this.Wrapped.SetItem("AvMods", value.Wrapped))

            member this.SetAvPayloads(value : String) : Plane =
                Plane(this.Wrapped.SetItem("AvPayloads", value.Wrapped))

            member this.SetAvSkins(value : String) : Plane =
                Plane(this.Wrapped.SetItem("AvSkins", value.Wrapped))

            member this.SetCallnum(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("Callnum", value.Wrapped))

            member this.SetCallsign(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("Callsign", value.Wrapped))

            member this.SetEngageable(value : Boolean) : Plane =
                Plane(this.Wrapped.SetItem("Engageable", value.Wrapped))

            member this.SetFuel(value : Float) : Plane =
                Plane(this.Wrapped.SetItem("Fuel", value.Wrapped))

            member this.SetLimitAmmo(value : Boolean) : Plane =
                Plane(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

            member this.SetModel(value : String) : Plane =
                Plane(this.Wrapped.SetItem("Model", value.Wrapped))

            member this.SetName(value : String) : Plane =
                Plane(this.Wrapped.SetItem("Name", value.Wrapped))

            member this.SetNumber(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("Number", value.Wrapped))

            member this.SetPayloadId(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("PayloadId", value.Wrapped))

            member this.SetRenewTime(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("RenewTime", value.Wrapped))

            member this.SetRenewable(value : Boolean) : Plane =
                Plane(this.Wrapped.SetItem("Renewable", value.Wrapped))

            member this.SetRouteTime(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("RouteTime", value.Wrapped))

            member this.SetScript(value : String) : Plane =
                Plane(this.Wrapped.SetItem("Script", value.Wrapped))

            member this.SetSetIndex(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("SetIndex", value.Wrapped))

            member this.SetSkin(value : String) : Plane =
                Plane(this.Wrapped.SetItem("Skin", value.Wrapped))

            member this.SetSpotter(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("Spotter", value.Wrapped))

            member this.SetStartInAir(value : Integer) : Plane =
                Plane(this.Wrapped.SetItem("StartInAir", value.Wrapped))

            member this.SetTCode(value : String) : Plane =
                Plane(this.Wrapped.SetItem("TCode", value.Wrapped))

            member this.SetTCodeColors(value : String) : Plane =
                Plane(this.Wrapped.SetItem("TCodeColors", value.Wrapped))

            member this.SetVulnerable(value : Boolean) : Plane =
                Plane(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

            member this.SetWMMask(value : Mask) : Plane =
                Plane(this.Wrapped.SetItem("WMMask", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("Plane") then
                        let s = Parsing.SubString(data, offset + 5)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'Plane'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "Plane " + (Ast.dump this.Wrapped)

            static member Default : Plane =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                Plane(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


        type Vehicle(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetAILevel() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AILevel") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AILevel' is not set"
                    )

            member this.GetAvMods() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AvMods") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AvMods' is not set"
                    )

            member this.GetAvPayloads() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AvPayloads") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AvPayloads' is not set"
                    )

            member this.GetAvSkins() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "AvSkins") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'AvSkins' is not set"
                    )

            member this.GetBeaconChannel() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "BeaconChannel") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'BeaconChannel' is not set"
                    )

            member this.GetCallnum() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Callnum") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Callnum' is not set"
                    )

            member this.GetCallsign() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Callsign") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Callsign' is not set"
                    )

            member this.GetEngageable() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Engageable") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Engageable' is not set"
                    )

            member this.GetFuel() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Fuel") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Fuel' is not set"
                    )

            member this.GetLimitAmmo() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'LimitAmmo' is not set"
                    )

            member this.GetModel() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Model") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Model' is not set"
                    )

            member this.GetName() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Name") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Name' is not set"
                    )

            member this.GetNumber() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Number") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Number' is not set"
                    )

            member this.GetPayloadId() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "PayloadId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'PayloadId' is not set"
                    )

            member this.GetRenewTime() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "RenewTime") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'RenewTime' is not set"
                    )

            member this.GetRenewable() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Renewable") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Renewable' is not set"
                    )

            member this.GetScript() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Script") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Script' is not set"
                    )

            member this.GetSetIndex() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "SetIndex") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'SetIndex' is not set"
                    )

            member this.GetSkin() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Skin") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Skin' is not set"
                    )

            member this.GetSpotter() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Spotter") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Spotter' is not set"
                    )

            member this.GetTCode() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TCode") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TCode' is not set"
                    )

            member this.GetTCodeColors() : String =
                String 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TCodeColors") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TCodeColors' is not set"
                    )

            member this.GetVulnerable() : Boolean =
                Boolean 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Vulnerable' is not set"
                    )

            member this.GetWMMask() : Mask =
                Mask 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "WMMask") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'WMMask' is not set"
                    )

            member this.SetAILevel(value : Integer) : Vehicle =
                Vehicle(this.Wrapped.SetItem("AILevel", value.Wrapped))

            member this.SetAvMods(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("AvMods", value.Wrapped))

            member this.SetAvPayloads(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("AvPayloads", value.Wrapped))

            member this.SetAvSkins(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("AvSkins", value.Wrapped))

            member this.SetBeaconChannel(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("BeaconChannel", value.Wrapped))

            member this.SetCallnum(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Callnum", value.Wrapped))

            member this.SetCallsign(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Callsign", value.Wrapped))

            member this.SetEngageable(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Engageable", value.Wrapped))

            member this.SetFuel(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Fuel", value.Wrapped))

            member this.SetLimitAmmo(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

            member this.SetModel(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Model", value.Wrapped))

            member this.SetName(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Name", value.Wrapped))

            member this.SetNumber(value : Integer) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Number", value.Wrapped))

            member this.SetPayloadId(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("PayloadId", value.Wrapped))

            member this.SetRenewTime(value : Integer) : Vehicle =
                Vehicle(this.Wrapped.SetItem("RenewTime", value.Wrapped))

            member this.SetRenewable(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Renewable", value.Wrapped))

            member this.SetScript(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Script", value.Wrapped))

            member this.SetSetIndex(value : Integer) : Vehicle =
                Vehicle(this.Wrapped.SetItem("SetIndex", value.Wrapped))

            member this.SetSkin(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Skin", value.Wrapped))

            member this.SetSpotter(value : Integer) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Spotter", value.Wrapped))

            member this.SetTCode(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("TCode", value.Wrapped))

            member this.SetTCodeColors(value : String) : Vehicle =
                Vehicle(this.Wrapped.SetItem("TCodeColors", value.Wrapped))

            member this.SetVulnerable(value : Boolean) : Vehicle =
                Vehicle(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

            member this.SetWMMask(value : Mask) : Vehicle =
                Vehicle(this.Wrapped.SetItem("WMMask", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("Vehicle") then
                        let s = Parsing.SubString(data, offset + 7)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'Vehicle'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "Vehicle " + (Ast.dump this.Wrapped)

            static member Default : Vehicle =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                Vehicle(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type Planes(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetPlanes() : Planes.Plane seq =
            let fields =
                (this.Wrapped : Ast.Value).GetItems()
            fields
            |> List.choose (fun (name, x) -> if name = "Plane" then Some x else None)
            |> Seq.map (fun x ->
                Planes.Plane (x)
            )

        member this.GetVehicles() : Planes.Vehicle seq =
            let fields =
                (this.Wrapped : Ast.Value).GetItems()
            fields
            |> List.choose (fun (name, x) -> if name = "Vehicle" then Some x else None)
            |> Seq.map (fun x ->
                Planes.Vehicle (x)
            )

        member this.SetPlane(value : Planes.Plane seq) : Planes =
            let xs = value |> Seq.map (fun x -> x.Wrapped)
            let res = this.Wrapped.ClearItems("Plane").AddItems("Plane", List.ofSeq xs)
            Planes(res)

        member this.SetVehicle(value : Planes.Vehicle seq) : Planes =
            let xs = value |> Seq.map (fun x -> x.Wrapped)
            let res = this.Wrapped.ClearItems("Vehicle").AddItems("Vehicle", List.ofSeq xs)
            Planes(res)

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="65" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("Planes") then
                    let s = Parsing.SubString(data, offset + 6)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'Planes'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "Planes " + (Ast.dump this.Wrapped)

        static member Default : Planes =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="65" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Planes(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="65" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type Airfield(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCallnum() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callnum") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callnum' is not set"
            )

    member this.GetCallsign() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callsign") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callsign' is not set"
            )

    member this.TryGetChart() : Airfield.Chart option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Chart" then Some x else None) e
        |> Option.map (fun x ->
            Airfield.Chart (x)
        )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.TryGetDamaged() : Airfield.Damaged option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Damaged" then Some x else None) e
        |> Option.map (fun x ->
            Airfield.Damaged (x)
        )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetDurability() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Durability") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Durability' is not set"
            )

    member this.GetHydrodrome() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Hydrodrome") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Hydrodrome' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetMaintenanceRadius() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "MaintenanceRadius") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'MaintenanceRadius' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.TryGetPlanes() : Airfield.Planes option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Planes" then Some x else None) e
        |> Option.map (fun x ->
            Airfield.Planes (x)
        )

    member this.GetRearmFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RearmFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RearmFriendlies' is not set"
            )

    member this.GetRearmTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RearmTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RearmTime' is not set"
            )

    member this.GetRefuelFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RefuelFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RefuelFriendlies' is not set"
            )

    member this.GetRefuelTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RefuelTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RefuelTime' is not set"
            )

    member this.GetRehealFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RehealFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RehealFriendlies' is not set"
            )

    member this.GetRehealTime() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RehealTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RehealTime' is not set"
            )

    member this.GetRepairFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RepairFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RepairFriendlies' is not set"
            )

    member this.GetRepairTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RepairTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RepairTime' is not set"
            )

    member this.GetReturnPlanes() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ReturnPlanes") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ReturnPlanes' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCallnum(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("Callnum", value.Wrapped))

    member this.SetCallsign(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("Callsign", value.Wrapped))

    member this.SetChart(value : Airfield.Chart option) : Airfield =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        Airfield(this.Wrapped.SetItem("Chart", arg))

    member this.SetCountry(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDamaged(value : Airfield.Damaged option) : Airfield =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        Airfield(this.Wrapped.SetItem("Damaged", arg))

    member this.SetDeleteAfterDeath(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Airfield =
        Airfield(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetDurability(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("Durability", value.Wrapped))

    member this.SetHydrodrome(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("Hydrodrome", value.Wrapped))

    member this.SetIndex(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetMaintenanceRadius(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("MaintenanceRadius", value.Wrapped))

    member this.SetModel(value : String) : Airfield =
        Airfield(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Airfield =
        Airfield(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetPlanes(value : Airfield.Planes option) : Airfield =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        Airfield(this.Wrapped.SetItem("Planes", arg))

    member this.SetRearmFriendlies(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("RearmFriendlies", value.Wrapped))

    member this.SetRearmTime(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("RearmTime", value.Wrapped))

    member this.SetRefuelFriendlies(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("RefuelFriendlies", value.Wrapped))

    member this.SetRefuelTime(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("RefuelTime", value.Wrapped))

    member this.SetRehealFriendlies(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("RehealFriendlies", value.Wrapped))

    member this.SetRehealTime(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("RehealTime", value.Wrapped))

    member this.SetRepairFriendlies(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("RepairFriendlies", value.Wrapped))

    member this.SetRepairTime(value : Integer) : Airfield =
        Airfield(this.Wrapped.SetItem("RepairTime", value.Wrapped))

    member this.SetReturnPlanes(value : Boolean) : Airfield =
        Airfield(this.Wrapped.SetItem("ReturnPlanes", value.Wrapped))

    member this.SetScript(value : String) : Airfield =
        Airfield(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetXOri(value : Float) : Airfield =
        Airfield(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Airfield =
        Airfield(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Airfield =
        Airfield(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Airfield =
        Airfield(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Airfield =
        Airfield(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Airfield =
        Airfield(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>33</count><items flags="sequence"><elem><Item1>Callnum</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Chart</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="20" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Hydrodrome</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Planes</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="114" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ReturnPlanes</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Airfield", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>33</count><items flags="sequence"><elem><Item1>Callnum</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Chart</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="20" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Hydrodrome</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Planes</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="114" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ReturnPlanes</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Airfield") then
                let s = Parsing.SubString(data, offset + 8)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Airfield'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Airfield " + (Ast.dump this.Wrapped)

    static member Default : Airfield =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>33</count><items flags="sequence"><elem><Item1>Callnum</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Chart</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="20" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Hydrodrome</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Planes</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="114" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ReturnPlanes</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Airfield(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>33</count><items flags="sequence"><elem><Item1>Callnum</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Chart</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="20" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Hydrodrome</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Planes</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="114" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ReturnPlanes</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="37" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module Block =


    type Damaged(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        static member FromMap(map : Map<int, Float>) : Damaged =
            let value =
                map
                |> Map.map (fun _ v -> v.Wrapped)
                |> Map.toList
                |> Ast.Value.Mapping
            Damaged(value)

        member this.Value : Map<int, Float> =
            Map.ofList(this.Wrapped.GetMapping())
            |> Map.map (fun _ x ->
                Float (x)
            )

        member this.SetItem(key : int, value : Float) : Damaged =
            Damaged (this.Wrapped.SetItem(key, value.Wrapped))

        member this.RemoveItem(key : int) : Damaged =
            Damaged (this.Wrapped.RemoveItem(key))

        member this.Clear() : Damaged =
            Damaged (Ast.Value.Mapping [])

        static member Default : Damaged =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mapping</Case><Item><Case>Float</Case></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Damaged(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mapping</Case><Item><Case>Float</Case></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type Block(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.TryGetDamaged() : Block.Damaged option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Damaged" then Some x else None) e
        |> Option.map (fun x ->
            Block.Damaged (x)
        )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetDurability() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Durability") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Durability' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCountry(value : Integer) : Block =
        Block(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Block =
        Block(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Block =
        Block(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDamaged(value : Block.Damaged option) : Block =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        Block(this.Wrapped.SetItem("Damaged", arg))

    member this.SetDeleteAfterDeath(value : Boolean) : Block =
        Block(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Block =
        Block(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetDurability(value : Integer) : Block =
        Block(this.Wrapped.SetItem("Durability", value.Wrapped))

    member this.SetIndex(value : Integer) : Block =
        Block(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Block =
        Block(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Block =
        Block(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Block =
        Block(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetScript(value : String) : Block =
        Block(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetXOri(value : Float) : Block =
        Block(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Block =
        Block(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Block =
        Block(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Block =
        Block(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Block =
        Block(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Block =
        Block(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Block", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Block") then
                let s = Parsing.SubString(data, offset + 5)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Block'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Block " + (Ast.dump this.Wrapped)

    static member Default : Block =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Block(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module Bridge =


    type Damaged(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        static member FromMap(map : Map<int, Float>) : Damaged =
            let value =
                map
                |> Map.map (fun _ v -> v.Wrapped)
                |> Map.toList
                |> Ast.Value.Mapping
            Damaged(value)

        member this.Value : Map<int, Float> =
            Map.ofList(this.Wrapped.GetMapping())
            |> Map.map (fun _ x ->
                Float (x)
            )

        member this.SetItem(key : int, value : Float) : Damaged =
            Damaged (this.Wrapped.SetItem(key, value.Wrapped))

        member this.RemoveItem(key : int) : Damaged =
            Damaged (this.Wrapped.RemoveItem(key))

        member this.Clear() : Damaged =
            Damaged (Ast.Value.Mapping [])

        static member Default : Damaged =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mapping</Case><Item><Case>Float</Case></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Damaged(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Mapping</Case><Item><Case>Float</Case></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type Bridge(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.TryGetDamaged() : Bridge.Damaged option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Damaged" then Some x else None) e
        |> Option.map (fun x ->
            Bridge.Damaged (x)
        )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetDurability() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Durability") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Durability' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCountry(value : Integer) : Bridge =
        Bridge(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Bridge =
        Bridge(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Bridge =
        Bridge(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDamaged(value : Bridge.Damaged option) : Bridge =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        Bridge(this.Wrapped.SetItem("Damaged", arg))

    member this.SetDeleteAfterDeath(value : Boolean) : Bridge =
        Bridge(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Bridge =
        Bridge(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetDurability(value : Integer) : Bridge =
        Bridge(this.Wrapped.SetItem("Durability", value.Wrapped))

    member this.SetIndex(value : Integer) : Bridge =
        Bridge(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Bridge =
        Bridge(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Bridge =
        Bridge(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Bridge =
        Bridge(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetScript(value : String) : Bridge =
        Bridge(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetXOri(value : Float) : Bridge =
        Bridge(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Bridge =
        Bridge(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Bridge =
        Bridge(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Bridge =
        Bridge(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Bridge =
        Bridge(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Bridge =
        Bridge(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Bridge", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Bridge") then
                let s = Parsing.SubString(data, offset + 6)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Bridge'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Bridge " + (Ast.dump this.Wrapped)

    static member Default : Bridge =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Bridge(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item><Case>Float</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Effect(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : Effect =
        Effect(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : Effect =
        Effect(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Effect =
        Effect(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Effect =
        Effect(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Effect =
        Effect(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetScript(value : String) : Effect =
        Effect(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetXOri(value : Float) : Effect =
        Effect(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Effect =
        Effect(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Effect =
        Effect(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Effect =
        Effect(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Effect =
        Effect(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Effect =
        Effect(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Effect", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Effect") then
                let s = Parsing.SubString(data, offset + 6)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Effect'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Effect " + (Ast.dump this.Wrapped)

    static member Default : Effect =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Effect(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Flag(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetBlockThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "BlockThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'BlockThreshold' is not set"
            )

    member this.GetCountPlanes() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CountPlanes") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CountPlanes' is not set"
            )

    member this.GetCountVehicles() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CountVehicles") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CountVehicles' is not set"
            )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetRadius() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Radius") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Radius' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetSpeedFactor() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "SpeedFactor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'SpeedFactor' is not set"
            )

    member this.GetStartHeight() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "StartHeight") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'StartHeight' is not set"
            )

    member this.GetType() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Type") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Type' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetBlockThreshold(value : Boolean) : Flag =
        Flag(this.Wrapped.SetItem("BlockThreshold", value.Wrapped))

    member this.SetCountPlanes(value : Boolean) : Flag =
        Flag(this.Wrapped.SetItem("CountPlanes", value.Wrapped))

    member this.SetCountVehicles(value : Boolean) : Flag =
        Flag(this.Wrapped.SetItem("CountVehicles", value.Wrapped))

    member this.SetCountry(value : Integer) : Flag =
        Flag(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDesc(value : String) : Flag =
        Flag(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : Flag =
        Flag(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Flag =
        Flag(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Flag =
        Flag(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Flag =
        Flag(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetRadius(value : Integer) : Flag =
        Flag(this.Wrapped.SetItem("Radius", value.Wrapped))

    member this.SetScript(value : String) : Flag =
        Flag(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetSpeedFactor(value : Boolean) : Flag =
        Flag(this.Wrapped.SetItem("SpeedFactor", value.Wrapped))

    member this.SetStartHeight(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("StartHeight", value.Wrapped))

    member this.SetType(value : Boolean) : Flag =
        Flag(this.Wrapped.SetItem("Type", value.Wrapped))

    member this.SetXOri(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Flag =
        Flag(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>20</count><items flags="sequence"><elem><Item1>BlockThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountPlanes</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpeedFactor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartHeight</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Flag", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>20</count><items flags="sequence"><elem><Item1>BlockThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountPlanes</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpeedFactor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartHeight</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Flag") then
                let s = Parsing.SubString(data, offset + 4)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Flag'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Flag " + (Ast.dump this.Wrapped)

    static member Default : Flag =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>20</count><items flags="sequence"><elem><Item1>BlockThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountPlanes</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpeedFactor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartHeight</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Flag(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>20</count><items flags="sequence"><elem><Item1>BlockThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountPlanes</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpeedFactor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartHeight</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Ground(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDamageReport(value : Integer) : Ground =
        Ground(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Ground =
        Ground(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDesc(value : String) : Ground =
        Ground(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : Ground =
        Ground(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Ground =
        Ground(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Ground =
        Ground(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Ground =
        Ground(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetXOri(value : Float) : Ground =
        Ground(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Ground =
        Ground(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Ground =
        Ground(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Ground =
        Ground(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Ground =
        Ground(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Ground =
        Ground(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>DamageReport</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Ground", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>DamageReport</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Ground") then
                let s = Parsing.SubString(data, offset + 6)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Ground'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Ground " + (Ast.dump this.Wrapped)

    static member Default : Ground =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>DamageReport</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Ground(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>DamageReport</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Activate(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Activate =
        MCU_Activate(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Activate", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Activate") then
                let s = Parsing.SubString(data, offset + 12)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Activate'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Activate " + (Ast.dump this.Wrapped)

    static member Default : MCU_Activate =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Activate(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_AttackArea(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAttackAir() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AttackAir") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AttackAir' is not set"
            )

    member this.GetAttackArea() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AttackArea") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AttackArea' is not set"
            )

    member this.GetAttackGTargets() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AttackGTargets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AttackGTargets' is not set"
            )

    member this.GetAttackGround() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AttackGround") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AttackGround' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetPriority() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Priority") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Priority' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Time") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Time' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAttackAir(value : Boolean) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("AttackAir", value.Wrapped))

    member this.SetAttackArea(value : Integer) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("AttackArea", value.Wrapped))

    member this.SetAttackGTargets(value : Boolean) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("AttackGTargets", value.Wrapped))

    member this.SetAttackGround(value : Boolean) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("AttackGround", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPriority(value : Integer) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Priority", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetTime(value : Integer) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("Time", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_AttackArea =
        MCU_CMD_AttackArea(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>17</count><items flags="sequence"><elem><Item1>AttackAir</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackArea</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGTargets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGround</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_AttackArea", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>17</count><items flags="sequence"><elem><Item1>AttackAir</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackArea</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGTargets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGround</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_AttackArea") then
                let s = Parsing.SubString(data, offset + 18)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_AttackArea'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_AttackArea " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_AttackArea =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>17</count><items flags="sequence"><elem><Item1>AttackAir</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackArea</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGTargets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGround</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_AttackArea(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>17</count><items flags="sequence"><elem><Item1>AttackAir</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackArea</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGTargets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGround</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_AttackTarget(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAttackGroup() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AttackGroup") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AttackGroup' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetPriority() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Priority") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Priority' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAttackGroup(value : Boolean) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("AttackGroup", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPriority(value : Integer) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("Priority", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_AttackTarget =
        MCU_CMD_AttackTarget(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>AttackGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_AttackTarget", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>AttackGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_AttackTarget") then
                let s = Parsing.SubString(data, offset + 20)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_AttackTarget'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_AttackTarget " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_AttackTarget =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>AttackGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_AttackTarget(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>AttackGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Behaviour(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAILevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AILevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AILevel' is not set"
            )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEngageable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Engageable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Engageable' is not set"
            )

    member this.GetFilter() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Filter") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Filter' is not set"
            )

    member this.GetFloatParam() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "FloatParam") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'FloatParam' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLimitAmmo() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LimitAmmo' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetRearmFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RearmFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RearmFriendlies' is not set"
            )

    member this.GetRefuelFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RefuelFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RefuelFriendlies' is not set"
            )

    member this.GetRehealFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RehealFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RehealFriendlies' is not set"
            )

    member this.GetRepairFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RepairFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RepairFriendlies' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetVulnerable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Vulnerable' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAILevel(value : Integer) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("AILevel", value.Wrapped))

    member this.SetCountry(value : Integer) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEngageable(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Engageable", value.Wrapped))

    member this.SetFilter(value : Integer) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Filter", value.Wrapped))

    member this.SetFloatParam(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("FloatParam", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLimitAmmo(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetRearmFriendlies(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("RearmFriendlies", value.Wrapped))

    member this.SetRefuelFriendlies(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("RefuelFriendlies", value.Wrapped))

    member this.SetRehealFriendlies(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("RehealFriendlies", value.Wrapped))

    member this.SetRepairFriendlies(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("RepairFriendlies", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetVulnerable(value : Boolean) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Behaviour =
        MCU_CMD_Behaviour(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Filter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FloatParam</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Behaviour", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Filter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FloatParam</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Behaviour") then
                let s = Parsing.SubString(data, offset + 17)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Behaviour'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Behaviour " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Behaviour =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Filter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FloatParam</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Behaviour(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Filter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FloatParam</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Cover(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCoverGroup() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CoverGroup") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CoverGroup' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetPriority() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Priority") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Priority' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCoverGroup(value : Boolean) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("CoverGroup", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPriority(value : Integer) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("Priority", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Cover =
        MCU_CMD_Cover(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>CoverGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Cover", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>CoverGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Cover") then
                let s = Parsing.SubString(data, offset + 13)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Cover'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Cover " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Cover =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>CoverGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Cover(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>CoverGroup</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Damage(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDamage() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Damage") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Damage' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetType() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Type") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Type' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDamage(value : Integer) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Damage", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetType(value : Boolean) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("Type", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Damage =
        MCU_CMD_Damage(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Damage</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Damage", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Damage</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Damage") then
                let s = Parsing.SubString(data, offset + 14)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Damage'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Damage " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Damage =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Damage</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Damage(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Damage</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Effect(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetActionType() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ActionType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ActionType' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetActionType(value : Boolean) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("ActionType", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Effect =
        MCU_CMD_Effect(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>ActionType</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Effect", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>ActionType</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Effect") then
                let s = Parsing.SubString(data, offset + 14)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Effect'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Effect " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Effect =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>ActionType</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Effect(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>ActionType</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Flare(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Color") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Color' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetColor(value : Integer) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("Color", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Flare =
        MCU_CMD_Flare(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Color</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Flare", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Color</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Flare") then
                let s = Parsing.SubString(data, offset + 13)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Flare'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Flare " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Flare =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Color</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Flare(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Color</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_ForceComplete(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEmergencyOrdnanceDrop() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EmergencyOrdnanceDrop") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EmergencyOrdnanceDrop' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetPriority() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Priority") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Priority' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEmergencyOrdnanceDrop(value : Boolean) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("EmergencyOrdnanceDrop", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPriority(value : Integer) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("Priority", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_ForceComplete =
        MCU_CMD_ForceComplete(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EmergencyOrdnanceDrop</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_ForceComplete", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EmergencyOrdnanceDrop</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_ForceComplete") then
                let s = Parsing.SubString(data, offset + 21)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_ForceComplete'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_ForceComplete " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_ForceComplete =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EmergencyOrdnanceDrop</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_ForceComplete(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EmergencyOrdnanceDrop</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Formation(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetFormationDensity() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "FormationDensity") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'FormationDensity' is not set"
            )

    member this.GetFormationType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "FormationType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'FormationType' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetFormationDensity(value : Integer) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("FormationDensity", value.Wrapped))

    member this.SetFormationType(value : Integer) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("FormationType", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Formation =
        MCU_CMD_Formation(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationDensity</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationType</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Formation", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationDensity</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationType</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Formation") then
                let s = Parsing.SubString(data, offset + 17)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Formation'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Formation " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Formation =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationDensity</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationType</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Formation(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationDensity</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationType</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="17" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_Land(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetPriority() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Priority") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Priority' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPriority(value : Boolean) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("Priority", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_Land =
        MCU_CMD_Land(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_Land", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_Land") then
                let s = Parsing.SubString(data, offset + 12)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_Land'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_Land " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_Land =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_Land(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CMD_TakeOff(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetNoTaxiTakeoff() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "NoTaxiTakeoff") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'NoTaxiTakeoff' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetNoTaxiTakeoff(value : Boolean) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("NoTaxiTakeoff", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CMD_TakeOff =
        MCU_CMD_TakeOff(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NoTaxiTakeoff</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CMD_TakeOff", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NoTaxiTakeoff</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CMD_TakeOff") then
                let s = Parsing.SubString(data, offset + 15)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CMD_TakeOff'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CMD_TakeOff " + (Ast.dump this.Wrapped)

    static member Default : MCU_CMD_TakeOff =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NoTaxiTakeoff</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CMD_TakeOff(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NoTaxiTakeoff</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_CheckZone(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCloser() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Closer") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Closer' is not set"
            )

    member this.GetCylinder() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Cylinder") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Cylinder' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.TryGetPlaneCoalitions() : VectorOfIntegers option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "PlaneCoalitions" then Some x else None) e
        |> Option.map (fun x ->
            VectorOfIntegers (x)
        )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.TryGetVehicleCoalitions() : VectorOfIntegers option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "VehicleCoalitions" then Some x else None) e
        |> Option.map (fun x ->
            VectorOfIntegers (x)
        )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.GetZone() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Zone") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Zone' is not set"
            )

    member this.SetCloser(value : Boolean) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Closer", value.Wrapped))

    member this.SetCylinder(value : Boolean) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Cylinder", value.Wrapped))

    member this.SetDesc(value : String) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPlaneCoalitions(value : VectorOfIntegers option) : MCU_CheckZone =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_CheckZone(this.Wrapped.SetItem("PlaneCoalitions", arg))

    member this.SetTargets(value : VectorOfIntegers) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetVehicleCoalitions(value : VectorOfIntegers option) : MCU_CheckZone =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_CheckZone(this.Wrapped.SetItem("VehicleCoalitions", arg))

    member this.SetXOri(value : Float) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.SetZone(value : Integer) : MCU_CheckZone =
        MCU_CheckZone(this.Wrapped.SetItem("Zone", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Zone</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_CheckZone", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Zone</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_CheckZone") then
                let s = Parsing.SubString(data, offset + 13)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_CheckZone'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_CheckZone " + (Ast.dump this.Wrapped)

    static member Default : MCU_CheckZone =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Zone</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_CheckZone(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Zone</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Counter(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCounter() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Counter") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Counter' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetDropcount() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Dropcount") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Dropcount' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCounter(value : Integer) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Counter", value.Wrapped))

    member this.SetDesc(value : String) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetDropcount(value : Boolean) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Dropcount", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Counter =
        MCU_Counter(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Counter</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Dropcount</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Counter", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Counter</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Dropcount</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Counter") then
                let s = Parsing.SubString(data, offset + 11)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Counter'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Counter " + (Ast.dump this.Wrapped)

    static member Default : MCU_Counter =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Counter</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Dropcount</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Counter(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Counter</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Dropcount</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_DateTime =


    type Time(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.Value : (Integer * Integer * Integer) =
            let x, y, z = this.Wrapped.GetTriplet()
            (Integer(x), Integer(y), Integer(z))

        static member Create(x : Integer, y : Integer, z : Integer) : Time =
            let value =
                Ast.Value.Triplet(x.Wrapped, y.Wrapped, z.Wrapped)
            Time(value)

        static member Default : Time =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /><Item3 flags="cached" id="2" /></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Time(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /><Item3 flags="cached" id="2" /></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_DateTime(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetConfig() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Config") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Config' is not set"
            )

    member this.GetDate() : Date =
        Date 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Date") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Date' is not set"
            )

    member this.GetDateTimeType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DateTimeType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DateTimeType' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetTime() : MCU_DateTime.Time =
        MCU_DateTime.Time 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Time") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Time' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetConfig(value : String) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Config", value.Wrapped))

    member this.SetDate(value : Date) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Date", value.Wrapped))

    member this.SetDateTimeType(value : Integer) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("DateTimeType", value.Wrapped))

    member this.SetDesc(value : String) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetTime(value : MCU_DateTime.Time) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("Time", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_DateTime =
        MCU_DateTime(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DateTimeType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_DateTime", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DateTimeType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_DateTime") then
                let s = Parsing.SubString(data, offset + 12)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_DateTime'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_DateTime " + (Ast.dump this.Wrapped)

    static member Default : MCU_DateTime =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DateTimeType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_DateTime(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DateTimeType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Deactivate(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Deactivate =
        MCU_Deactivate(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Deactivate", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Deactivate") then
                let s = Parsing.SubString(data, offset + 14)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Deactivate'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Deactivate " + (Ast.dump this.Wrapped)

    static member Default : MCU_Deactivate =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Deactivate(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Delete(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Delete =
        MCU_Delete(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Delete", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Delete") then
                let s = Parsing.SubString(data, offset + 10)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Delete'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Delete " + (Ast.dump this.Wrapped)

    static member Default : MCU_Delete =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Delete(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Icon(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetBColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "BColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'BColor' is not set"
            )

    member this.GetCoalitions() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Coalitions") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Coalitions' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetGColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "GColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'GColor' is not set"
            )

    member this.GetIconId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "IconId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'IconId' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLCDesc() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCDesc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCDesc' is not set"
            )

    member this.GetLCName() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCName") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCName' is not set"
            )

    member this.GetLineType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LineType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LineType' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetRColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RColor' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetBColor(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("BColor", value.Wrapped))

    member this.SetCoalitions(value : VectorOfIntegers) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("Coalitions", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetGColor(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("GColor", value.Wrapped))

    member this.SetIconId(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("IconId", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLCDesc(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("LCDesc", value.Wrapped))

    member this.SetLCName(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("LCName", value.Wrapped))

    member this.SetLineType(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("LineType", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetRColor(value : Integer) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("RColor", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Icon =
        MCU_Icon(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LineType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Icon", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LineType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Icon") then
                let s = Parsing.SubString(data, offset + 8)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Icon'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Icon " + (Ast.dump this.Wrapped)

    static member Default : MCU_Icon =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LineType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Icon(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LineType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="32" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_ModifierAddVal(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetData0() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data0") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data0' is not set"
            )

    member this.GetData1() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data1") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data1' is not set"
            )

    member this.GetData2() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data2") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data2' is not set"
            )

    member this.GetData3() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data3") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data3' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetParamIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ParamIndex") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ParamIndex' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetData0(value : Integer) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Data0", value.Wrapped))

    member this.SetData1(value : Boolean) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Data1", value.Wrapped))

    member this.SetData2(value : Boolean) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Data2", value.Wrapped))

    member this.SetData3(value : Boolean) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Data3", value.Wrapped))

    member this.SetDesc(value : String) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetParamIndex(value : Integer) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("ParamIndex", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_ModifierAddVal =
        MCU_ModifierAddVal(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_ModifierAddVal", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_ModifierAddVal") then
                let s = Parsing.SubString(data, offset + 18)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_ModifierAddVal'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_ModifierAddVal " + (Ast.dump this.Wrapped)

    static member Default : MCU_ModifierAddVal =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_ModifierAddVal(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_ModifierSetVal(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetData0() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data0") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data0' is not set"
            )

    member this.GetData1() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data1") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data1' is not set"
            )

    member this.GetData2() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data2") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data2' is not set"
            )

    member this.GetData3() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Data3") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Data3' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetParamIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ParamIndex") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ParamIndex' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetData0(value : Integer) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Data0", value.Wrapped))

    member this.SetData1(value : Boolean) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Data1", value.Wrapped))

    member this.SetData2(value : Boolean) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Data2", value.Wrapped))

    member this.SetData3(value : Boolean) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Data3", value.Wrapped))

    member this.SetDesc(value : String) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetParamIndex(value : Integer) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("ParamIndex", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_ModifierSetVal =
        MCU_ModifierSetVal(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_ModifierSetVal", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_ModifierSetVal") then
                let s = Parsing.SubString(data, offset + 18)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_ModifierSetVal'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_ModifierSetVal " + (Ast.dump this.Wrapped)

    static member Default : MCU_ModifierSetVal =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_ModifierSetVal(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Proximity(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCloser() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Closer") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Closer' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetDistance() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Distance") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Distance' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.TryGetPlaneCoalitions() : VectorOfIntegers option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "PlaneCoalitions" then Some x else None) e
        |> Option.map (fun x ->
            VectorOfIntegers (x)
        )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.TryGetVehicleCoalitions() : VectorOfIntegers option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "VehicleCoalitions" then Some x else None) e
        |> Option.map (fun x ->
            VectorOfIntegers (x)
        )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCloser(value : Boolean) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Closer", value.Wrapped))

    member this.SetDesc(value : String) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetDistance(value : Integer) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Distance", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPlaneCoalitions(value : VectorOfIntegers option) : MCU_Proximity =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_Proximity(this.Wrapped.SetItem("PlaneCoalitions", arg))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetVehicleCoalitions(value : VectorOfIntegers option) : MCU_Proximity =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_Proximity(this.Wrapped.SetItem("VehicleCoalitions", arg))

    member this.SetXOri(value : Float) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Proximity =
        MCU_Proximity(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Distance</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Proximity", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Distance</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Proximity") then
                let s = Parsing.SubString(data, offset + 13)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Proximity'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Proximity " + (Ast.dump this.Wrapped)

    static member Default : MCU_Proximity =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Distance</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Proximity(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Distance</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Spawner(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetSpawnAtMe() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "SpawnAtMe") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'SpawnAtMe' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetSpawnAtMe(value : Boolean) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("SpawnAtMe", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Spawner =
        MCU_Spawner(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpawnAtMe</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Spawner", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpawnAtMe</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Spawner") then
                let s = Parsing.SubString(data, offset + 11)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Spawner'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Spawner " + (Ast.dump this.Wrapped)

    static member Default : MCU_Spawner =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpawnAtMe</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Spawner(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpawnAtMe</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_TR_CameraOperator =

    module OnEvents =


        type OnEvent(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetTarId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TarId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TarId' is not set"
                    )

            member this.GetType() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Type") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Type' is not set"
                    )

            member this.SetTarId(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("TarId", value.Wrapped))

            member this.SetType(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("Type", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("OnEvent") then
                        let s = Parsing.SubString(data, offset + 7)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'OnEvent'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "OnEvent " + (Ast.dump this.Wrapped)

            static member Default : OnEvent =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                OnEvent(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type OnEvents(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetOnEvent() : OnEvents.OnEvent =
            OnEvents.OnEvent 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "OnEvent") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'OnEvent' is not set"
                )

        member this.SetOnEvent(value : OnEvents.OnEvent) : OnEvents =
            OnEvents(this.Wrapped.SetItem("OnEvent", value.Wrapped))

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("OnEvents") then
                    let s = Parsing.SubString(data, offset + 8)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'OnEvents'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "OnEvents " + (Ast.dump this.Wrapped)

        static member Default : OnEvents =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            OnEvents(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_TR_CameraOperator(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCameraType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CameraType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CameraType' is not set"
            )

    member this.TryGetCoalitions() : VectorOfIntegers option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Coalitions" then Some x else None) e
        |> Option.map (fun x ->
            VectorOfIntegers (x)
        )

    member this.GetConfig() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Config") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Config' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetFOV() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "FOV") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'FOV' is not set"
            )

    member this.GetFirstId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "FirstId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'FirstId' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLockView() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LockView") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LockView' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.TryGetOnEvents() : MCU_TR_CameraOperator.OnEvents option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "OnEvents" then Some x else None) e
        |> Option.map (fun x ->
            MCU_TR_CameraOperator.OnEvents (x)
        )

    member this.GetSecondId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "SecondId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'SecondId' is not set"
            )

    member this.GetSpeed() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Speed") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Speed' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCameraType(value : Integer) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("CameraType", value.Wrapped))

    member this.SetCoalitions(value : VectorOfIntegers option) : MCU_TR_CameraOperator =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Coalitions", arg))

    member this.SetConfig(value : String) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Config", value.Wrapped))

    member this.SetDesc(value : String) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetFOV(value : Integer) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("FOV", value.Wrapped))

    member this.SetFirstId(value : Integer) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("FirstId", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLockView(value : Boolean) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("LockView", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetOnEvents(value : MCU_TR_CameraOperator.OnEvents option) : MCU_TR_CameraOperator =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_TR_CameraOperator(this.Wrapped.SetItem("OnEvents", arg))

    member this.SetSecondId(value : Integer) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("SecondId", value.Wrapped))

    member this.SetSpeed(value : Integer) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Speed", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_CameraOperator =
        MCU_TR_CameraOperator(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>21</count><items flags="sequence"><elem><Item1>CameraType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FOV</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FirstId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LockView</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SecondId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_CameraOperator", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>21</count><items flags="sequence"><elem><Item1>CameraType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FOV</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FirstId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LockView</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SecondId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_CameraOperator") then
                let s = Parsing.SubString(data, offset + 21)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_CameraOperator'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_CameraOperator " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_CameraOperator =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>21</count><items flags="sequence"><elem><Item1>CameraType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FOV</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FirstId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LockView</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SecondId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_CameraOperator(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>21</count><items flags="sequence"><elem><Item1>CameraType</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FOV</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FirstId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LockView</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SecondId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_TR_ComplexTrigger =

    module OnEvents =


        type OnEvent(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetTarId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TarId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TarId' is not set"
                    )

            member this.GetType() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Type") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Type' is not set"
                    )

            member this.SetTarId(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("TarId", value.Wrapped))

            member this.SetType(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("Type", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("OnEvent") then
                        let s = Parsing.SubString(data, offset + 7)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'OnEvent'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "OnEvent " + (Ast.dump this.Wrapped)

            static member Default : OnEvent =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                OnEvent(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type OnEvents(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetOnEvents() : OnEvents.OnEvent seq =
            let fields =
                (this.Wrapped : Ast.Value).GetItems()
            fields
            |> List.choose (fun (name, x) -> if name = "OnEvent" then Some x else None)
            |> Seq.map (fun x ->
                OnEvents.OnEvent (x)
            )

        member this.SetOnEvent(value : OnEvents.OnEvent seq) : OnEvents =
            let xs = value |> Seq.map (fun x -> x.Wrapped)
            let res = this.Wrapped.ClearItems("OnEvent").AddItems("OnEvent", List.ofSeq xs)
            OnEvents(res)

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("OnEvents") then
                    let s = Parsing.SubString(data, offset + 8)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'OnEvents'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "OnEvents " + (Ast.dump this.Wrapped)

        static member Default : OnEvents =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            OnEvents(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_TR_ComplexTrigger(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCheckPlanes() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CheckPlanes") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CheckPlanes' is not set"
            )

    member this.GetCheckVehicles() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CheckVehicles") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CheckVehicles' is not set"
            )

    member this.GetCountrys() : Integer seq =
        let fields =
            (this.Wrapped : Ast.Value).GetItems()
        fields
        |> List.choose (fun (name, x) -> if name = "Country" then Some x else None)
        |> Seq.map (fun x ->
            Integer (x)
        )

    member this.GetCylinder() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Cylinder") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Cylinder' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnableds() : Boolean seq =
        let fields =
            (this.Wrapped : Ast.Value).GetItems()
        fields
        |> List.choose (fun (name, x) -> if name = "Enabled" then Some x else None)
        |> Seq.map (fun x ->
            Boolean (x)
        )

    member this.GetEventsFilterCriticallyDamaged() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterCriticallyDamaged") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterCriticallyDamaged' is not set"
            )

    member this.GetEventsFilterDamaged() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterDamaged") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterDamaged' is not set"
            )

    member this.GetEventsFilterDeliveredCargo() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterDeliveredCargo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterDeliveredCargo' is not set"
            )

    member this.GetEventsFilterDropedBombs() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterDropedBombs") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterDropedBombs' is not set"
            )

    member this.GetEventsFilterDroppedCargoContainers() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterDroppedCargoContainers") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterDroppedCargoContainers' is not set"
            )

    member this.GetEventsFilterEnteredAlive() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterEnteredAlive") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterEnteredAlive' is not set"
            )

    member this.GetEventsFilterEnteredSimple() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterEnteredSimple") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterEnteredSimple' is not set"
            )

    member this.GetEventsFilterFinishedAlive() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterFinishedAlive") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterFinishedAlive' is not set"
            )

    member this.GetEventsFilterFinishedSimple() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterFinishedSimple") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterFinishedSimple' is not set"
            )

    member this.GetEventsFilterFinishedStationaryAndAlive() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterFinishedStationaryAndAlive") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterFinishedStationaryAndAlive' is not set"
            )

    member this.GetEventsFilterFiredFlare() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterFiredFlare") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterFiredFlare' is not set"
            )

    member this.GetEventsFilterFiredRockets() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterFiredRockets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterFiredRockets' is not set"
            )

    member this.GetEventsFilterKilled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterKilled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterKilled' is not set"
            )

    member this.GetEventsFilterLeftAlive() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterLeftAlive") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterLeftAlive' is not set"
            )

    member this.GetEventsFilterLeftSimple() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterLeftSimple") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterLeftSimple' is not set"
            )

    member this.GetEventsFilterParatrooperJumped() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterParatrooperJumped") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterParatrooperJumped' is not set"
            )

    member this.GetEventsFilterParatrooperLandedAlive() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterParatrooperLandedAlive") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterParatrooperLandedAlive' is not set"
            )

    member this.GetEventsFilterRepaired() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterRepaired") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterRepaired' is not set"
            )

    member this.GetEventsFilterSpawned() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterSpawned") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterSpawned' is not set"
            )

    member this.GetEventsFilterStationaryAndAlive() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterStationaryAndAlive") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterStationaryAndAlive' is not set"
            )

    member this.GetEventsFilterTookOff() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "EventsFilterTookOff") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'EventsFilterTookOff' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjectNames() : String seq =
        let fields =
            (this.Wrapped : Ast.Value).GetItems()
        fields
        |> List.choose (fun (name, x) -> if name = "ObjectName" then Some x else None)
        |> Seq.map (fun x ->
            String (x)
        )

    member this.GetObjectScripts() : String seq =
        let fields =
            (this.Wrapped : Ast.Value).GetItems()
        fields
        |> List.choose (fun (name, x) -> if name = "ObjectScript" then Some x else None)
        |> Seq.map (fun x ->
            String (x)
        )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.TryGetOnEvents() : MCU_TR_ComplexTrigger.OnEvents option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "OnEvents" then Some x else None) e
        |> Option.map (fun x ->
            MCU_TR_ComplexTrigger.OnEvents (x)
        )

    member this.GetRadius() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Radius") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Radius' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCheckPlanes(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("CheckPlanes", value.Wrapped))

    member this.SetCheckVehicles(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("CheckVehicles", value.Wrapped))

    member this.SetCountry(value : Integer seq) : MCU_TR_ComplexTrigger =
        let xs = value |> Seq.map (fun x -> x.Wrapped)
        let res = this.Wrapped.ClearItems("Country").AddItems("Country", List.ofSeq xs)
        MCU_TR_ComplexTrigger(res)

    member this.SetCylinder(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Cylinder", value.Wrapped))

    member this.SetDamageReport(value : Integer) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDesc(value : String) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean seq) : MCU_TR_ComplexTrigger =
        let xs = value |> Seq.map (fun x -> x.Wrapped)
        let res = this.Wrapped.ClearItems("Enabled").AddItems("Enabled", List.ofSeq xs)
        MCU_TR_ComplexTrigger(res)

    member this.SetEventsFilterCriticallyDamaged(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterCriticallyDamaged", value.Wrapped))

    member this.SetEventsFilterDamaged(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterDamaged", value.Wrapped))

    member this.SetEventsFilterDeliveredCargo(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterDeliveredCargo", value.Wrapped))

    member this.SetEventsFilterDropedBombs(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterDropedBombs", value.Wrapped))

    member this.SetEventsFilterDroppedCargoContainers(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterDroppedCargoContainers", value.Wrapped))

    member this.SetEventsFilterEnteredAlive(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterEnteredAlive", value.Wrapped))

    member this.SetEventsFilterEnteredSimple(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterEnteredSimple", value.Wrapped))

    member this.SetEventsFilterFinishedAlive(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterFinishedAlive", value.Wrapped))

    member this.SetEventsFilterFinishedSimple(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterFinishedSimple", value.Wrapped))

    member this.SetEventsFilterFinishedStationaryAndAlive(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterFinishedStationaryAndAlive", value.Wrapped))

    member this.SetEventsFilterFiredFlare(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterFiredFlare", value.Wrapped))

    member this.SetEventsFilterFiredRockets(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterFiredRockets", value.Wrapped))

    member this.SetEventsFilterKilled(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterKilled", value.Wrapped))

    member this.SetEventsFilterLeftAlive(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterLeftAlive", value.Wrapped))

    member this.SetEventsFilterLeftSimple(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterLeftSimple", value.Wrapped))

    member this.SetEventsFilterParatrooperJumped(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterParatrooperJumped", value.Wrapped))

    member this.SetEventsFilterParatrooperLandedAlive(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterParatrooperLandedAlive", value.Wrapped))

    member this.SetEventsFilterRepaired(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterRepaired", value.Wrapped))

    member this.SetEventsFilterSpawned(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterSpawned", value.Wrapped))

    member this.SetEventsFilterStationaryAndAlive(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterStationaryAndAlive", value.Wrapped))

    member this.SetEventsFilterTookOff(value : Boolean) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("EventsFilterTookOff", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjectName(value : String seq) : MCU_TR_ComplexTrigger =
        let xs = value |> Seq.map (fun x -> x.Wrapped)
        let res = this.Wrapped.ClearItems("ObjectName").AddItems("ObjectName", List.ofSeq xs)
        MCU_TR_ComplexTrigger(res)

    member this.SetObjectScript(value : String seq) : MCU_TR_ComplexTrigger =
        let xs = value |> Seq.map (fun x -> x.Wrapped)
        let res = this.Wrapped.ClearItems("ObjectScript").AddItems("ObjectScript", List.ofSeq xs)
        MCU_TR_ComplexTrigger(res)

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetOnEvents(value : MCU_TR_ComplexTrigger.OnEvents option) : MCU_TR_ComplexTrigger =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("OnEvents", arg))

    member this.SetRadius(value : Integer) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Radius", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_ComplexTrigger =
        MCU_TR_ComplexTrigger(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>43</count><items flags="sequence"><elem><Item1>CheckPlanes</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CheckVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>EventsFilterCriticallyDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDeliveredCargo</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDropedBombs</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDroppedCargoContainers</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredFlare</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredRockets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterKilled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperJumped</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperLandedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterRepaired</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterSpawned</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterTookOff</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ObjectName</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>ObjectScript</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="74" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_ComplexTrigger", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>43</count><items flags="sequence"><elem><Item1>CheckPlanes</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CheckVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>EventsFilterCriticallyDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDeliveredCargo</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDropedBombs</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDroppedCargoContainers</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredFlare</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredRockets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterKilled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperJumped</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperLandedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterRepaired</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterSpawned</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterTookOff</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ObjectName</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>ObjectScript</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="74" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_ComplexTrigger") then
                let s = Parsing.SubString(data, offset + 21)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_ComplexTrigger'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_ComplexTrigger " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_ComplexTrigger =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>43</count><items flags="sequence"><elem><Item1>CheckPlanes</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CheckVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>EventsFilterCriticallyDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDeliveredCargo</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDropedBombs</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDroppedCargoContainers</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredFlare</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredRockets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterKilled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperJumped</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperLandedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterRepaired</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterSpawned</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterTookOff</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ObjectName</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>ObjectScript</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="74" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_ComplexTrigger(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>43</count><items flags="sequence"><elem><Item1>CheckPlanes</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CheckVehicles</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>EventsFilterCriticallyDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDamaged</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDeliveredCargo</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDropedBombs</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDroppedCargoContainers</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredFlare</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredRockets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterKilled</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftSimple</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperJumped</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperLandedAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterRepaired</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterSpawned</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterTookOff</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ObjectName</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>ObjectScript</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="10" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="74" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="93" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_TR_Entity =

    module OnEvents =


        type OnEvent(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetTarId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TarId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TarId' is not set"
                    )

            member this.GetType() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Type") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Type' is not set"
                    )

            member this.SetTarId(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("TarId", value.Wrapped))

            member this.SetType(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("Type", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("OnEvent") then
                        let s = Parsing.SubString(data, offset + 7)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'OnEvent'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "OnEvent " + (Ast.dump this.Wrapped)

            static member Default : OnEvent =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                OnEvent(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type OnEvents(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetOnEvents() : OnEvents.OnEvent seq =
            let fields =
                (this.Wrapped : Ast.Value).GetItems()
            fields
            |> List.choose (fun (name, x) -> if name = "OnEvent" then Some x else None)
            |> Seq.map (fun x ->
                OnEvents.OnEvent (x)
            )

        member this.SetOnEvent(value : OnEvents.OnEvent seq) : OnEvents =
            let xs = value |> Seq.map (fun x -> x.Wrapped)
            let res = this.Wrapped.ClearItems("OnEvent").AddItems("OnEvent", List.ofSeq xs)
            OnEvents(res)

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("OnEvents") then
                    let s = Parsing.SubString(data, offset + 8)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'OnEvents'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "OnEvents " + (Ast.dump this.Wrapped)

        static member Default : OnEvents =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            OnEvents(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)

    module OnReports =


        type OnReport(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetCmdId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "CmdId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'CmdId' is not set"
                    )

            member this.GetTarId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TarId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TarId' is not set"
                    )

            member this.GetType() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Type") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Type' is not set"
                    )

            member this.SetCmdId(value : Integer) : OnReport =
                OnReport(this.Wrapped.SetItem("CmdId", value.Wrapped))

            member this.SetTarId(value : Integer) : OnReport =
                OnReport(this.Wrapped.SetItem("TarId", value.Wrapped))

            member this.SetType(value : Integer) : OnReport =
                OnReport(this.Wrapped.SetItem("Type", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("OnReport") then
                        let s = Parsing.SubString(data, offset + 8)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'OnReport'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "OnReport " + (Ast.dump this.Wrapped)

            static member Default : OnReport =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                OnReport(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type OnReports(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetOnReports() : OnReports.OnReport seq =
            let fields =
                (this.Wrapped : Ast.Value).GetItems()
            fields
            |> List.choose (fun (name, x) -> if name = "OnReport" then Some x else None)
            |> Seq.map (fun x ->
                OnReports.OnReport (x)
            )

        member this.SetOnReport(value : OnReports.OnReport seq) : OnReports =
            let xs = value |> Seq.map (fun x -> x.Wrapped)
            let res = this.Wrapped.ClearItems("OnReport").AddItems("OnReport", List.ofSeq xs)
            OnReports(res)

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("OnReports") then
                    let s = Parsing.SubString(data, offset + 9)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'OnReports'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "OnReports " + (Ast.dump this.Wrapped)

        static member Default : OnReports =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            OnReports(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_TR_Entity(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetMisObjID() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "MisObjID") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'MisObjID' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.TryGetOnEvents() : MCU_TR_Entity.OnEvents option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "OnEvents" then Some x else None) e
        |> Option.map (fun x ->
            MCU_TR_Entity.OnEvents (x)
        )

    member this.TryGetOnReports() : MCU_TR_Entity.OnReports option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "OnReports" then Some x else None) e
        |> Option.map (fun x ->
            MCU_TR_Entity.OnReports (x)
        )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetMisObjID(value : Integer) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("MisObjID", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetOnEvents(value : MCU_TR_Entity.OnEvents option) : MCU_TR_Entity =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_TR_Entity(this.Wrapped.SetItem("OnEvents", arg))

    member this.SetOnReports(value : MCU_TR_Entity.OnReports option) : MCU_TR_Entity =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        MCU_TR_Entity(this.Wrapped.SetItem("OnReports", arg))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_Entity =
        MCU_TR_Entity(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MisObjID</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnReports</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_Entity", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MisObjID</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnReports</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_Entity") then
                let s = Parsing.SubString(data, offset + 13)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_Entity'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_Entity " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_Entity =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MisObjID</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnReports</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_Entity(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MisObjID</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnReports</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="18" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="49" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_TR_InfluenceArea =


    type Boundary(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.Value : FloatPair seq =
            this.Wrapped.GetList()
            |> Seq.map (fun x ->
                FloatPair (x)
            )

        static member FromList(items : FloatPair seq) : Boundary =
            let value =
                items |> Seq.map (fun item -> item.Wrapped) |> List.ofSeq |> Ast.Value.List
            Boundary(value)

        static member Default : Boundary =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>FloatPair</Case></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Boundary(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>FloatPair</Case></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_TR_InfluenceArea(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetBoundary() : MCU_TR_InfluenceArea.Boundary =
        MCU_TR_InfluenceArea.Boundary 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Boundary") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Boundary' is not set"
            )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetBoundary(value : MCU_TR_InfluenceArea.Boundary) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Boundary", value.Wrapped))

    member this.SetCountry(value : Integer) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDesc(value : String) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_InfluenceArea =
        MCU_TR_InfluenceArea(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Boundary</Item1><Item2><Item1><Case>List</Case><Item><Case>FloatPair</Case></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_InfluenceArea", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Boundary</Item1><Item2><Item1><Case>List</Case><Item><Case>FloatPair</Case></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_InfluenceArea") then
                let s = Parsing.SubString(data, offset + 20)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_InfluenceArea'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_InfluenceArea " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_InfluenceArea =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Boundary</Item1><Item2><Item1><Case>List</Case><Item><Case>FloatPair</Case></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_InfluenceArea(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Boundary</Item1><Item2><Item1><Case>List</Case><Item><Case>FloatPair</Case></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="12" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="27" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_TR_Media =

    module OnEvents =


        type OnEvent(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.GetTarId() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "TarId") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'TarId' is not set"
                    )

            member this.GetType() : Integer =
                Integer 
                    (
                        let e =
                            (this.Wrapped : Ast.Value).GetItems()
                        match List.tryFind (fun (name, _) -> name = "Type") e with
                        | Some (_, value) -> value
                        | None -> failwithf "Field 'Type' is not set"
                    )

            member this.SetTarId(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("TarId", value.Wrapped))

            member this.SetType(value : Integer) : OnEvent =
                OnEvent(this.Wrapped.SetItem("Type", value.Wrapped))

            static member GetParser() : Parsing.ParserFun =
                let bodyParser =
                    Parsing.makeParser 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                fun (s : Parsing.Stream) ->
                    let (Parsing.SubString(data, offset)) = s
                    if data.Substring(offset).StartsWith("OnEvent") then
                        let s = Parsing.SubString(data, offset + 7)
                        bodyParser.Run s
                    else
                        Parsing.parseError("Expected 'OnEvent'", s)
                |> Parsing.ParserFun

            member this.AsString() : string =
                "OnEvent " + (Ast.dump this.Wrapped)

            static member Default : OnEvent =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                OnEvent(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type OnEvents(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetOnEvent() : OnEvents.OnEvent =
            OnEvents.OnEvent 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "OnEvent") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'OnEvent' is not set"
                )

        member this.SetOnEvent(value : OnEvents.OnEvent) : OnEvents =
            OnEvents(this.Wrapped.SetItem("OnEvent", value.Wrapped))

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("OnEvents") then
                    let s = Parsing.SubString(data, offset + 8)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'OnEvents'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "OnEvents " + (Ast.dump this.Wrapped)

        static member Default : OnEvents =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            OnEvents(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="9" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_TR_Media(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetBColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "BColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'BColor' is not set"
            )

    member this.GetConfig() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Config") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Config' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetExpandTime() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ExpandTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ExpandTime' is not set"
            )

    member this.GetFadeTime() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "FadeTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'FadeTime' is not set"
            )

    member this.GetGColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "GColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'GColor' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetMediaType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "MediaType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'MediaType' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetOnEvents() : MCU_TR_Media.OnEvents =
        MCU_TR_Media.OnEvents 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "OnEvents") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'OnEvents' is not set"
            )

    member this.GetOpacity() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Opacity") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Opacity' is not set"
            )

    member this.GetRColor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RColor' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetTotalTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TotalTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TotalTime' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetBColor(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("BColor", value.Wrapped))

    member this.SetConfig(value : String) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Config", value.Wrapped))

    member this.SetDesc(value : String) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetExpandTime(value : Boolean) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("ExpandTime", value.Wrapped))

    member this.SetFadeTime(value : Boolean) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("FadeTime", value.Wrapped))

    member this.SetGColor(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("GColor", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetMediaType(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("MediaType", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetOnEvents(value : MCU_TR_Media.OnEvents) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("OnEvents", value.Wrapped))

    member this.SetOpacity(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Opacity", value.Wrapped))

    member this.SetRColor(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("RColor", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetTotalTime(value : Integer) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("TotalTime", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_Media =
        MCU_TR_Media(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ExpandTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FadeTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MediaType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Opacity</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TotalTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_Media", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ExpandTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FadeTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MediaType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Opacity</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TotalTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_Media") then
                let s = Parsing.SubString(data, offset + 12)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_Media'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_Media " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_Media =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ExpandTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FadeTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MediaType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Opacity</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TotalTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_Media(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ExpandTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FadeTime</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MediaType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Opacity</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TotalTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="51" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_TR_MissionBegin(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_MissionBegin =
        MCU_TR_MissionBegin(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_MissionBegin", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_MissionBegin") then
                let s = Parsing.SubString(data, offset + 19)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_MissionBegin'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_MissionBegin " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_MissionBegin =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_MissionBegin(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_TR_MissionEnd(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetSucceeded() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Succeeded") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Succeeded' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetSucceeded(value : Boolean) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Succeeded", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_MissionEnd =
        MCU_TR_MissionEnd(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Succeeded</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_MissionEnd", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Succeeded</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_MissionEnd") then
                let s = Parsing.SubString(data, offset + 17)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_MissionEnd'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_MissionEnd " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_MissionEnd =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Succeeded</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_MissionEnd(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Succeeded</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="23" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_TR_MissionObjective(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCoalition() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Coalition") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Coalition' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIconType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "IconType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'IconType' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLCDesc() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCDesc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCDesc' is not set"
            )

    member this.GetLCName() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCName") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCName' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetSuccess() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Success") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Success' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetTaskType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TaskType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TaskType' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCoalition(value : Integer) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("Coalition", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIconType(value : Integer) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("IconType", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLCDesc(value : Integer) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("LCDesc", value.Wrapped))

    member this.SetLCName(value : Integer) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("LCName", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetSuccess(value : Boolean) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("Success", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetTaskType(value : Integer) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("TaskType", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_MissionObjective =
        MCU_TR_MissionObjective(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Coalition</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Success</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TaskType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_MissionObjective", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Coalition</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Success</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TaskType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_MissionObjective") then
                let s = Parsing.SubString(data, offset + 23)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_MissionObjective'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_MissionObjective " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_MissionObjective =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Coalition</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Success</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TaskType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_MissionObjective(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Coalition</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Success</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="19" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TaskType</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="28" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_TR_ServerInput(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_ServerInput =
        MCU_TR_ServerInput(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_ServerInput", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_ServerInput") then
                let s = Parsing.SubString(data, offset + 18)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_ServerInput'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_ServerInput " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_ServerInput =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_ServerInput(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="16" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module MCU_TR_Subtitle =


    type SubtitleInfo(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.GetBColor() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "BColor") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'BColor' is not set"
                )

        member this.GetDuration() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "Duration") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'Duration' is not set"
                )

        member this.GetFontSize() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "FontSize") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'FontSize' is not set"
                )

        member this.GetGColor() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "GColor") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'GColor' is not set"
                )

        member this.GetHAlign() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "HAlign") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'HAlign' is not set"
                )

        member this.GetLCText() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "LCText") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'LCText' is not set"
                )

        member this.GetRColor() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "RColor") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'RColor' is not set"
                )

        member this.GetVAlign() : Integer =
            Integer 
                (
                    let e =
                        (this.Wrapped : Ast.Value).GetItems()
                    match List.tryFind (fun (name, _) -> name = "VAlign") e with
                    | Some (_, value) -> value
                    | None -> failwithf "Field 'VAlign' is not set"
                )

        member this.SetBColor(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("BColor", value.Wrapped))

        member this.SetDuration(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("Duration", value.Wrapped))

        member this.SetFontSize(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("FontSize", value.Wrapped))

        member this.SetGColor(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("GColor", value.Wrapped))

        member this.SetHAlign(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("HAlign", value.Wrapped))

        member this.SetLCText(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("LCText", value.Wrapped))

        member this.SetRColor(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("RColor", value.Wrapped))

        member this.SetVAlign(value : Integer) : SubtitleInfo =
            SubtitleInfo(this.Wrapped.SetItem("VAlign", value.Wrapped))

        static member GetParser() : Parsing.ParserFun =
            let bodyParser =
                Parsing.makeParser 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            fun (s : Parsing.Stream) ->
                let (Parsing.SubString(data, offset)) = s
                if data.Substring(offset).StartsWith("SubtitleInfo") then
                    let s = Parsing.SubString(data, offset + 12)
                    bodyParser.Run s
                else
                    Parsing.parseError("Expected 'SubtitleInfo'", s)
            |> Parsing.ParserFun

        member this.AsString() : string =
            "SubtitleInfo " + (Ast.dump this.Wrapped)

        static member Default : SubtitleInfo =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            SubtitleInfo(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type MCU_TR_Subtitle(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetCoalitions() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Coalitions") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Coalitions' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEnabled() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Enabled") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Enabled' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetSubtitleInfo() : MCU_TR_Subtitle.SubtitleInfo =
        MCU_TR_Subtitle.SubtitleInfo 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "SubtitleInfo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'SubtitleInfo' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetCoalitions(value : VectorOfIntegers) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Coalitions", value.Wrapped))

    member this.SetDesc(value : String) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEnabled(value : Boolean) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Enabled", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetSubtitleInfo(value : MCU_TR_Subtitle.SubtitleInfo) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("SubtitleInfo", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_TR_Subtitle =
        MCU_TR_Subtitle(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SubtitleInfo</Item1><Item2><Item1><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_TR_Subtitle", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SubtitleInfo</Item1><Item2><Item1><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_TR_Subtitle") then
                let s = Parsing.SubString(data, offset + 15)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_TR_Subtitle'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_TR_Subtitle " + (Ast.dump this.Wrapped)

    static member Default : MCU_TR_Subtitle =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SubtitleInfo</Item1><Item2><Item1><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_TR_Subtitle(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Coalitions</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SubtitleInfo</Item1><Item2><Item1><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="43" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Timer(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetRandom() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Random") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Random' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetTime() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Time") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Time' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetDesc(value : String) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetRandom(value : Integer) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Random", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetTime(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("Time", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Timer =
        MCU_Timer(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Random</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Timer", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Random</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Timer") then
                let s = Parsing.SubString(data, offset + 9)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Timer'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Timer " + (Ast.dump this.Wrapped)

    static member Default : MCU_Timer =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Random</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Timer(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Random</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="13" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="20" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type MCU_Waypoint(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetArea() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Area") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Area' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetObjects() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Objects") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Objects' is not set"
            )

    member this.GetPriority() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Priority") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Priority' is not set"
            )

    member this.GetSpeed() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Speed") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Speed' is not set"
            )

    member this.GetTargets() : VectorOfIntegers =
        VectorOfIntegers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Targets") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Targets' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetArea(value : Integer) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Area", value.Wrapped))

    member this.SetDesc(value : String) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetIndex(value : Integer) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetName(value : String) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetObjects(value : VectorOfIntegers) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Objects", value.Wrapped))

    member this.SetPriority(value : Integer) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Priority", value.Wrapped))

    member this.SetSpeed(value : Integer) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Speed", value.Wrapped))

    member this.SetTargets(value : VectorOfIntegers) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("Targets", value.Wrapped))

    member this.SetXOri(value : Float) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : MCU_Waypoint =
        MCU_Waypoint(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Area</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("MCU_Waypoint", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Area</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("MCU_Waypoint") then
                let s = Parsing.SubString(data, offset + 12)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'MCU_Waypoint'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "MCU_Waypoint " + (Ast.dump this.Wrapped)

    static member Default : MCU_Waypoint =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Area</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        MCU_Waypoint(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Area</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1><Case>IntVector</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="15" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="24" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module Options =

    module Countries =


        type Countries_ValueType(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.Value : (Integer * Integer) =
                let x, y = this.Wrapped.GetPair()
                (Integer(x), Integer(y))

            static member Create(x : Integer, y : Integer) : Countries_ValueType =
                let value =
                    Ast.Value.Pair(x.Wrapped, y.Wrapped)
                Countries_ValueType(value)

            static member Default : Countries_ValueType =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Pair</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                Countries_ValueType(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Pair</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type Countries(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.Value : Countries.Countries_ValueType seq =
            this.Wrapped.GetList()
            |> Seq.map (fun x ->
                Countries.Countries_ValueType (x)
            )

        static member FromList(items : Countries.Countries_ValueType seq) : Countries =
            let value =
                items |> Seq.map (fun item -> item.Wrapped) |> List.ofSeq |> Ast.Value.List
            Countries(value)

        static member Default : Countries =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>Pair</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="3" /></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Countries(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>Pair</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="3" /></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


    type Time(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.Value : (Integer * Integer * Integer) =
            let x, y, z = this.Wrapped.GetTriplet()
            (Integer(x), Integer(y), Integer(z))

        static member Create(x : Integer, y : Integer, z : Integer) : Time =
            let value =
                Ast.Value.Triplet(x.Wrapped, y.Wrapped, z.Wrapped)
            Time(value)

        static member Default : Time =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /><Item3 flags="cached" id="2" /></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Time(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /><Item3 flags="cached" id="2" /></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)

    module WindLayers =


        type WindLayers_ValueType(value : Ast.Value) = 
            inherit AstValueWrapper(value)

            member this.Value : (Integer * Integer * Integer) =
                let x, y, z = this.Wrapped.GetTriplet()
                (Integer(x), Integer(y), Integer(z))

            static member Create(x : Integer, y : Integer, z : Integer) : WindLayers_ValueType =
                let value =
                    Ast.Value.Triplet(x.Wrapped, y.Wrapped, z.Wrapped)
                WindLayers_ValueType(value)

            static member Default : WindLayers_ValueType =
                let value =
                    Ast.defaultValue 
                        (
                            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /><Item3 flags="cached" id="2" /></value></FsPickler>""")
                            let serializer = XmlSerializer()
                            serializer.Deserialize<ValueType>(reader)
                        )
                WindLayers_ValueType(value)

            static member AstType : Ast.ValueType =
                let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="2" /><Item3 flags="cached" id="2" /></value></FsPickler>""")
                let serializer = XmlSerializer()
                serializer.Deserialize<ValueType>(reader)


    type WindLayers(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.Value : WindLayers.WindLayers_ValueType seq =
            this.Wrapped.GetList()
            |> Seq.map (fun x ->
                WindLayers.WindLayers_ValueType (x)
            )

        static member FromList(items : WindLayers.WindLayers_ValueType seq) : WindLayers =
            let value =
                items |> Seq.map (fun item -> item.Wrapped) |> List.ofSeq |> Ast.Value.List
            WindLayers(value)

        static member Default : WindLayers =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="3" /><Item3 flags="cached" id="3" /></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            WindLayers(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>Triplet</Case><Item1><Case>Integer</Case></Item1><Item2 flags="cached" id="3" /><Item3 flags="cached" id="3" /></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type Options(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAqmId() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AqmId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AqmId' is not set"
            )

    member this.GetCloudConfig() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CloudConfig") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CloudConfig' is not set"
            )

    member this.GetCloudHeight() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CloudHeight") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CloudHeight' is not set"
            )

    member this.GetCloudLevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CloudLevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CloudLevel' is not set"
            )

    member this.GetCountries() : Options.Countries =
        Options.Countries 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Countries") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Countries' is not set"
            )

    member this.GetDate() : Date =
        Date 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Date") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Date' is not set"
            )

    member this.GetForests() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Forests") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Forests' is not set"
            )

    member this.GetGuiMap() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "GuiMap") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'GuiMap' is not set"
            )

    member this.GetHMap() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "HMap") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'HMap' is not set"
            )

    member this.GetHaze() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Haze") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Haze' is not set"
            )

    member this.GetLCAuthor() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCAuthor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCAuthor' is not set"
            )

    member this.GetLCDesc() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCDesc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCDesc' is not set"
            )

    member this.GetLCName() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LCName") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LCName' is not set"
            )

    member this.GetLayers() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Layers") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Layers' is not set"
            )

    member this.GetMissionType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "MissionType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'MissionType' is not set"
            )

    member this.GetMultiplayerPlaneConfigs() : String seq =
        let fields =
            (this.Wrapped : Ast.Value).GetItems()
        fields
        |> List.choose (fun (name, x) -> if name = "MultiplayerPlaneConfig" then Some x else None)
        |> Seq.map (fun x ->
            String (x)
        )

    member this.GetPlayerConfig() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "PlayerConfig") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'PlayerConfig' is not set"
            )

    member this.GetPrecLevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "PrecLevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'PrecLevel' is not set"
            )

    member this.GetPrecType() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "PrecType") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'PrecType' is not set"
            )

    member this.GetPressure() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Pressure") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Pressure' is not set"
            )

    member this.GetSeaState() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "SeaState") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'SeaState' is not set"
            )

    member this.GetSeasonPrefix() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "SeasonPrefix") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'SeasonPrefix' is not set"
            )

    member this.GetTempPressLevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TempPressLevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TempPressLevel' is not set"
            )

    member this.GetTemperature() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Temperature") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Temperature' is not set"
            )

    member this.GetTextures() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Textures") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Textures' is not set"
            )

    member this.GetTime() : Options.Time =
        Options.Time 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Time") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Time' is not set"
            )

    member this.GetTurbulence() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Turbulence") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Turbulence' is not set"
            )

    member this.GetWindLayers() : Options.WindLayers =
        Options.WindLayers 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "WindLayers") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'WindLayers' is not set"
            )

    member this.SetAqmId(value : Boolean) : Options =
        Options(this.Wrapped.SetItem("AqmId", value.Wrapped))

    member this.SetCloudConfig(value : String) : Options =
        Options(this.Wrapped.SetItem("CloudConfig", value.Wrapped))

    member this.SetCloudHeight(value : Integer) : Options =
        Options(this.Wrapped.SetItem("CloudHeight", value.Wrapped))

    member this.SetCloudLevel(value : Integer) : Options =
        Options(this.Wrapped.SetItem("CloudLevel", value.Wrapped))

    member this.SetCountries(value : Options.Countries) : Options =
        Options(this.Wrapped.SetItem("Countries", value.Wrapped))

    member this.SetDate(value : Date) : Options =
        Options(this.Wrapped.SetItem("Date", value.Wrapped))

    member this.SetForests(value : String) : Options =
        Options(this.Wrapped.SetItem("Forests", value.Wrapped))

    member this.SetGuiMap(value : String) : Options =
        Options(this.Wrapped.SetItem("GuiMap", value.Wrapped))

    member this.SetHMap(value : String) : Options =
        Options(this.Wrapped.SetItem("HMap", value.Wrapped))

    member this.SetHaze(value : Float) : Options =
        Options(this.Wrapped.SetItem("Haze", value.Wrapped))

    member this.SetLCAuthor(value : Integer) : Options =
        Options(this.Wrapped.SetItem("LCAuthor", value.Wrapped))

    member this.SetLCDesc(value : Boolean) : Options =
        Options(this.Wrapped.SetItem("LCDesc", value.Wrapped))

    member this.SetLCName(value : Boolean) : Options =
        Options(this.Wrapped.SetItem("LCName", value.Wrapped))

    member this.SetLayers(value : String) : Options =
        Options(this.Wrapped.SetItem("Layers", value.Wrapped))

    member this.SetMissionType(value : Integer) : Options =
        Options(this.Wrapped.SetItem("MissionType", value.Wrapped))

    member this.SetMultiplayerPlaneConfig(value : String seq) : Options =
        let xs = value |> Seq.map (fun x -> x.Wrapped)
        let res = this.Wrapped.ClearItems("MultiplayerPlaneConfig").AddItems("MultiplayerPlaneConfig", List.ofSeq xs)
        Options(res)

    member this.SetPlayerConfig(value : String) : Options =
        Options(this.Wrapped.SetItem("PlayerConfig", value.Wrapped))

    member this.SetPrecLevel(value : Integer) : Options =
        Options(this.Wrapped.SetItem("PrecLevel", value.Wrapped))

    member this.SetPrecType(value : Integer) : Options =
        Options(this.Wrapped.SetItem("PrecType", value.Wrapped))

    member this.SetPressure(value : Integer) : Options =
        Options(this.Wrapped.SetItem("Pressure", value.Wrapped))

    member this.SetSeaState(value : Integer) : Options =
        Options(this.Wrapped.SetItem("SeaState", value.Wrapped))

    member this.SetSeasonPrefix(value : String) : Options =
        Options(this.Wrapped.SetItem("SeasonPrefix", value.Wrapped))

    member this.SetTempPressLevel(value : Integer) : Options =
        Options(this.Wrapped.SetItem("TempPressLevel", value.Wrapped))

    member this.SetTemperature(value : Integer) : Options =
        Options(this.Wrapped.SetItem("Temperature", value.Wrapped))

    member this.SetTextures(value : String) : Options =
        Options(this.Wrapped.SetItem("Textures", value.Wrapped))

    member this.SetTime(value : Options.Time) : Options =
        Options(this.Wrapped.SetItem("Time", value.Wrapped))

    member this.SetTurbulence(value : Float) : Options =
        Options(this.Wrapped.SetItem("Turbulence", value.Wrapped))

    member this.SetWindLayers(value : Options.WindLayers) : Options =
        Options(this.Wrapped.SetItem("WindLayers", value.Wrapped))

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>28</count><items flags="sequence"><elem><Item1>AqmId</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudConfig</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudHeight</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Countries</Item1><Item2><Item1><Case>List</Case><Item><Case>Pair</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Forests</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GuiMap</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HMap</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Haze</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCAuthor</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Layers</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MissionType</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MultiplayerPlaneConfig</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>PlayerConfig</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecType</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Pressure</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeaState</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeasonPrefix</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TempPressLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Temperature</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Textures</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Turbulence</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WindLayers</Item1><Item2><Item1><Case>List</Case><Item><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Options") then
                let s = Parsing.SubString(data, offset + 7)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Options'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Options " + (Ast.dump this.Wrapped)

    static member Default : Options =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>28</count><items flags="sequence"><elem><Item1>AqmId</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudConfig</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudHeight</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Countries</Item1><Item2><Item1><Case>List</Case><Item><Case>Pair</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Forests</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GuiMap</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HMap</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Haze</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCAuthor</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Layers</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MissionType</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MultiplayerPlaneConfig</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>PlayerConfig</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecType</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Pressure</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeaState</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeasonPrefix</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TempPressLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Temperature</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Textures</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Turbulence</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WindLayers</Item1><Item2><Item1><Case>List</Case><Item><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Options(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>28</count><items flags="sequence"><elem><Item1>AqmId</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudConfig</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudHeight</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Countries</Item1><Item2><Item1><Case>List</Case><Item><Case>Pair</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1><Case>Date</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Forests</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GuiMap</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HMap</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Haze</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCAuthor</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Layers</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MissionType</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MultiplayerPlaneConfig</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>PlayerConfig</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecType</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Pressure</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeaState</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeasonPrefix</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TempPressLevel</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Temperature</Item1><Item2><Item1 flags="cached" id="11" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Textures</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Turbulence</Item1><Item2><Item1 flags="cached" id="29" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WindLayers</Item1><Item2><Item1><Case>List</Case><Item><Case>Triplet</Case><Item1 flags="cached" id="11" /><Item2 flags="cached" id="11" /><Item3 flags="cached" id="11" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Plane(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAILevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AILevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AILevel' is not set"
            )

    member this.GetAiRTBDecision() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AiRTBDecision") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AiRTBDecision' is not set"
            )

    member this.GetCallnum() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callnum") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callnum' is not set"
            )

    member this.GetCallsign() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callsign") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callsign' is not set"
            )

    member this.GetCoopStart() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CoopStart") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CoopStart' is not set"
            )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEngageable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Engageable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Engageable' is not set"
            )

    member this.GetFuel() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Fuel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Fuel' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLimitAmmo() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LimitAmmo' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetNumberInFormation() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "NumberInFormation") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'NumberInFormation' is not set"
            )

    member this.GetPayloadId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "PayloadId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'PayloadId' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetSkin() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Skin") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Skin' is not set"
            )

    member this.GetSpotter() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Spotter") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Spotter' is not set"
            )

    member this.GetStartInAir() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "StartInAir") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'StartInAir' is not set"
            )

    member this.GetTCode() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TCode") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TCode' is not set"
            )

    member this.GetTCodeColor() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TCodeColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TCodeColor' is not set"
            )

    member this.GetTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Time") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Time' is not set"
            )

    member this.GetVulnerable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Vulnerable' is not set"
            )

    member this.GetWMMask() : Mask =
        Mask 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "WMMask") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'WMMask' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAILevel(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("AILevel", value.Wrapped))

    member this.SetAiRTBDecision(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("AiRTBDecision", value.Wrapped))

    member this.SetCallnum(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("Callnum", value.Wrapped))

    member this.SetCallsign(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("Callsign", value.Wrapped))

    member this.SetCoopStart(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("CoopStart", value.Wrapped))

    member this.SetCountry(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDeleteAfterDeath(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Plane =
        Plane(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEngageable(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("Engageable", value.Wrapped))

    member this.SetFuel(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("Fuel", value.Wrapped))

    member this.SetIndex(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLimitAmmo(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Plane =
        Plane(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Plane =
        Plane(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetNumberInFormation(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("NumberInFormation", value.Wrapped))

    member this.SetPayloadId(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("PayloadId", value.Wrapped))

    member this.SetScript(value : String) : Plane =
        Plane(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetSkin(value : String) : Plane =
        Plane(this.Wrapped.SetItem("Skin", value.Wrapped))

    member this.SetSpotter(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("Spotter", value.Wrapped))

    member this.SetStartInAir(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("StartInAir", value.Wrapped))

    member this.SetTCode(value : String) : Plane =
        Plane(this.Wrapped.SetItem("TCode", value.Wrapped))

    member this.SetTCodeColor(value : String) : Plane =
        Plane(this.Wrapped.SetItem("TCodeColor", value.Wrapped))

    member this.SetTime(value : Integer) : Plane =
        Plane(this.Wrapped.SetItem("Time", value.Wrapped))

    member this.SetVulnerable(value : Boolean) : Plane =
        Plane(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

    member this.SetWMMask(value : Mask) : Plane =
        Plane(this.Wrapped.SetItem("WMMask", value.Wrapped))

    member this.SetXOri(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Plane =
        Plane(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>34</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AiRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Plane", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>34</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AiRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Plane") then
                let s = Parsing.SubString(data, offset + 5)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Plane'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Plane " + (Ast.dump this.Wrapped)

    static member Default : Plane =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>34</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AiRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Plane(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>34</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AiRTBDecision</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="30" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Ship(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAILevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AILevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AILevel' is not set"
            )

    member this.GetBeaconChannel() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "BeaconChannel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'BeaconChannel' is not set"
            )

    member this.GetCallsign() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callsign") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callsign' is not set"
            )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEngageable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Engageable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Engageable' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLimitAmmo() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LimitAmmo' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetSpotter() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Spotter") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Spotter' is not set"
            )

    member this.GetTCode() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TCode") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TCode' is not set"
            )

    member this.GetTCodeColor() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TCodeColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TCodeColor' is not set"
            )

    member this.GetVulnerable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Vulnerable' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAILevel(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("AILevel", value.Wrapped))

    member this.SetBeaconChannel(value : Boolean) : Ship =
        Ship(this.Wrapped.SetItem("BeaconChannel", value.Wrapped))

    member this.SetCallsign(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("Callsign", value.Wrapped))

    member this.SetCountry(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Ship =
        Ship(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDeleteAfterDeath(value : Boolean) : Ship =
        Ship(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Ship =
        Ship(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEngageable(value : Boolean) : Ship =
        Ship(this.Wrapped.SetItem("Engageable", value.Wrapped))

    member this.SetIndex(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLimitAmmo(value : Boolean) : Ship =
        Ship(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Ship =
        Ship(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Ship =
        Ship(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetScript(value : String) : Ship =
        Ship(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetSpotter(value : Integer) : Ship =
        Ship(this.Wrapped.SetItem("Spotter", value.Wrapped))

    member this.SetTCode(value : String) : Ship =
        Ship(this.Wrapped.SetItem("TCode", value.Wrapped))

    member this.SetTCodeColor(value : String) : Ship =
        Ship(this.Wrapped.SetItem("TCodeColor", value.Wrapped))

    member this.SetVulnerable(value : Boolean) : Ship =
        Ship(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

    member this.SetXOri(value : Float) : Ship =
        Ship(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Ship =
        Ship(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Ship =
        Ship(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Ship =
        Ship(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Ship =
        Ship(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Ship =
        Ship(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>25</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Ship", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>25</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Ship") then
                let s = Parsing.SubString(data, offset + 4)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Ship'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Ship " + (Ast.dump this.Wrapped)

    static member Default : Ship =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>25</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Ship(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>25</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="21" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="46" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)

module Train =


    type Carriages(value : Ast.Value) = 
        inherit AstValueWrapper(value)

        member this.Value : String seq =
            this.Wrapped.GetList()
            |> Seq.map (fun x ->
                String (x)
            )

        static member FromList(items : String seq) : Carriages =
            let value =
                items |> Seq.map (fun item -> item.Wrapped) |> List.ofSeq |> Ast.Value.List
            Carriages(value)

        static member Default : Carriages =
            let value =
                Ast.defaultValue 
                    (
                        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>String</Case></Item></value></FsPickler>""")
                        let serializer = XmlSerializer()
                        serializer.Deserialize<ValueType>(reader)
                    )
            Carriages(value)

        static member AstType : Ast.ValueType =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>List</Case><Item><Case>String</Case></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)


type Train(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAILevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AILevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AILevel' is not set"
            )

    member this.GetBeaconChannel() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "BeaconChannel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'BeaconChannel' is not set"
            )

    member this.GetCallsign() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callsign") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callsign' is not set"
            )

    member this.TryGetCarriages() : Train.Carriages option =
        let e =
            (this.Wrapped : Ast.Value).GetItems()
        List.tryPick (fun (name, x) -> if name = "Carriages" then Some x else None) e
        |> Option.map (fun x ->
            Train.Carriages (x)
        )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEngageable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Engageable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Engageable' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLimitAmmo() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LimitAmmo' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetSpotter() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Spotter") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Spotter' is not set"
            )

    member this.GetVulnerable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Vulnerable' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAILevel(value : Integer) : Train =
        Train(this.Wrapped.SetItem("AILevel", value.Wrapped))

    member this.SetBeaconChannel(value : Boolean) : Train =
        Train(this.Wrapped.SetItem("BeaconChannel", value.Wrapped))

    member this.SetCallsign(value : Integer) : Train =
        Train(this.Wrapped.SetItem("Callsign", value.Wrapped))

    member this.SetCarriages(value : Train.Carriages option) : Train =
        let arg = value |> Option.map (fun x -> x.Wrapped)
        Train(this.Wrapped.SetItem("Carriages", arg))

    member this.SetCountry(value : Integer) : Train =
        Train(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Train =
        Train(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Train =
        Train(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDeleteAfterDeath(value : Boolean) : Train =
        Train(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Train =
        Train(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEngageable(value : Boolean) : Train =
        Train(this.Wrapped.SetItem("Engageable", value.Wrapped))

    member this.SetIndex(value : Integer) : Train =
        Train(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLimitAmmo(value : Boolean) : Train =
        Train(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Train =
        Train(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetModel(value : String) : Train =
        Train(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Train =
        Train(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetScript(value : String) : Train =
        Train(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetSpotter(value : Integer) : Train =
        Train(this.Wrapped.SetItem("Spotter", value.Wrapped))

    member this.SetVulnerable(value : Boolean) : Train =
        Train(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

    member this.SetXOri(value : Float) : Train =
        Train(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Train =
        Train(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Train =
        Train(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Train =
        Train(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Train =
        Train(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Train =
        Train(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Carriages</Item1><Item2><Item1><Case>List</Case><Item><Case>String</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Train", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Carriages</Item1><Item2><Item1><Case>List</Case><Item><Case>String</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Train") then
                let s = Parsing.SubString(data, offset + 5)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Train'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Train " + (Ast.dump this.Wrapped)

    static member Default : Train =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Carriages</Item1><Item2><Item1><Case>List</Case><Item><Case>String</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Train(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Carriages</Item1><Item2><Item1><Case>List</Case><Item><Case>String</Case></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="14" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="45" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


type Vehicle(value : Ast.Value) = 
    inherit AstValueWrapper(value)

    member this.GetAILevel() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "AILevel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'AILevel' is not set"
            )

    member this.GetBeaconChannel() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "BeaconChannel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'BeaconChannel' is not set"
            )

    member this.GetCallnum() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callnum") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callnum' is not set"
            )

    member this.GetCallsign() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Callsign") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Callsign' is not set"
            )

    member this.GetCoopStart() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "CoopStart") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'CoopStart' is not set"
            )

    member this.GetCountry() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Country") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Country' is not set"
            )

    member this.GetDamageReport() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageReport") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageReport' is not set"
            )

    member this.GetDamageThreshold() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DamageThreshold") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DamageThreshold' is not set"
            )

    member this.GetDeleteAfterDeath() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "DeleteAfterDeath") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'DeleteAfterDeath' is not set"
            )

    member this.GetDesc() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Desc") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Desc' is not set"
            )

    member this.GetEngageable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Engageable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Engageable' is not set"
            )

    member this.GetFuel() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Fuel") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Fuel' is not set"
            )

    member this.GetIndex() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Index") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Index' is not set"
            )

    member this.GetLimitAmmo() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LimitAmmo") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LimitAmmo' is not set"
            )

    member this.GetLinkTrId() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "LinkTrId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'LinkTrId' is not set"
            )

    member this.GetMaintenanceRadius() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "MaintenanceRadius") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'MaintenanceRadius' is not set"
            )

    member this.GetModel() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Model") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Model' is not set"
            )

    member this.GetName() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Name") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Name' is not set"
            )

    member this.GetNumberInFormation() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "NumberInFormation") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'NumberInFormation' is not set"
            )

    member this.GetPayloadId() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "PayloadId") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'PayloadId' is not set"
            )

    member this.GetRearmFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RearmFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RearmFriendlies' is not set"
            )

    member this.GetRearmTime() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RearmTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RearmTime' is not set"
            )

    member this.GetRefuelFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RefuelFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RefuelFriendlies' is not set"
            )

    member this.GetRefuelTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RefuelTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RefuelTime' is not set"
            )

    member this.GetRehealFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RehealFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RehealFriendlies' is not set"
            )

    member this.GetRehealTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RehealTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RehealTime' is not set"
            )

    member this.GetRepairFriendlies() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RepairFriendlies") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RepairFriendlies' is not set"
            )

    member this.GetRepairTime() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "RepairTime") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'RepairTime' is not set"
            )

    member this.GetScript() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Script") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Script' is not set"
            )

    member this.GetSkin() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Skin") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Skin' is not set"
            )

    member this.GetSpotter() : Integer =
        Integer 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Spotter") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Spotter' is not set"
            )

    member this.GetTCode() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TCode") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TCode' is not set"
            )

    member this.GetTCodeColor() : String =
        String 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "TCodeColor") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'TCodeColor' is not set"
            )

    member this.GetVulnerable() : Boolean =
        Boolean 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "Vulnerable") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'Vulnerable' is not set"
            )

    member this.GetWMMask() : Mask =
        Mask 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "WMMask") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'WMMask' is not set"
            )

    member this.GetXOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XOri' is not set"
            )

    member this.GetXPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "XPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'XPos' is not set"
            )

    member this.GetYOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YOri' is not set"
            )

    member this.GetYPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "YPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'YPos' is not set"
            )

    member this.GetZOri() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZOri") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZOri' is not set"
            )

    member this.GetZPos() : Float =
        Float 
            (
                let e =
                    (this.Wrapped : Ast.Value).GetItems()
                match List.tryFind (fun (name, _) -> name = "ZPos") e with
                | Some (_, value) -> value
                | None -> failwithf "Field 'ZPos' is not set"
            )

    member this.SetAILevel(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("AILevel", value.Wrapped))

    member this.SetBeaconChannel(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("BeaconChannel", value.Wrapped))

    member this.SetCallnum(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Callnum", value.Wrapped))

    member this.SetCallsign(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Callsign", value.Wrapped))

    member this.SetCoopStart(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("CoopStart", value.Wrapped))

    member this.SetCountry(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Country", value.Wrapped))

    member this.SetDamageReport(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("DamageReport", value.Wrapped))

    member this.SetDamageThreshold(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("DamageThreshold", value.Wrapped))

    member this.SetDeleteAfterDeath(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("DeleteAfterDeath", value.Wrapped))

    member this.SetDesc(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Desc", value.Wrapped))

    member this.SetEngageable(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Engageable", value.Wrapped))

    member this.SetFuel(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Fuel", value.Wrapped))

    member this.SetIndex(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Index", value.Wrapped))

    member this.SetLimitAmmo(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("LimitAmmo", value.Wrapped))

    member this.SetLinkTrId(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("LinkTrId", value.Wrapped))

    member this.SetMaintenanceRadius(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("MaintenanceRadius", value.Wrapped))

    member this.SetModel(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Model", value.Wrapped))

    member this.SetName(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Name", value.Wrapped))

    member this.SetNumberInFormation(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("NumberInFormation", value.Wrapped))

    member this.SetPayloadId(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("PayloadId", value.Wrapped))

    member this.SetRearmFriendlies(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RearmFriendlies", value.Wrapped))

    member this.SetRearmTime(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RearmTime", value.Wrapped))

    member this.SetRefuelFriendlies(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RefuelFriendlies", value.Wrapped))

    member this.SetRefuelTime(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RefuelTime", value.Wrapped))

    member this.SetRehealFriendlies(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RehealFriendlies", value.Wrapped))

    member this.SetRehealTime(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RehealTime", value.Wrapped))

    member this.SetRepairFriendlies(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RepairFriendlies", value.Wrapped))

    member this.SetRepairTime(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("RepairTime", value.Wrapped))

    member this.SetScript(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Script", value.Wrapped))

    member this.SetSkin(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Skin", value.Wrapped))

    member this.SetSpotter(value : Integer) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Spotter", value.Wrapped))

    member this.SetTCode(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("TCode", value.Wrapped))

    member this.SetTCodeColor(value : String) : Vehicle =
        Vehicle(this.Wrapped.SetItem("TCodeColor", value.Wrapped))

    member this.SetVulnerable(value : Boolean) : Vehicle =
        Vehicle(this.Wrapped.SetItem("Vulnerable", value.Wrapped))

    member this.SetWMMask(value : Mask) : Vehicle =
        Vehicle(this.Wrapped.SetItem("WMMask", value.Wrapped))

    member this.SetXOri(value : Float) : Vehicle =
        Vehicle(this.Wrapped.SetItem("XOri", value.Wrapped))

    member this.SetXPos(value : Float) : Vehicle =
        Vehicle(this.Wrapped.SetItem("XPos", value.Wrapped))

    member this.SetYOri(value : Float) : Vehicle =
        Vehicle(this.Wrapped.SetItem("YOri", value.Wrapped))

    member this.SetYPos(value : Float) : Vehicle =
        Vehicle(this.Wrapped.SetItem("YPos", value.Wrapped))

    member this.SetZOri(value : Float) : Vehicle =
        Vehicle(this.Wrapped.SetItem("ZOri", value.Wrapped))

    member this.SetZPos(value : Float) : Vehicle =
        Vehicle(this.Wrapped.SetItem("ZPos", value.Wrapped))

    member this.CreateMcu() : Mcu.McuBase =
        let typ =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>41</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<ValueType>(reader)
        let f = McuFactory.tryMakeMcu("Vehicle", typ).Value
        f(this.Wrapped, [])

    static member GetParser() : Parsing.ParserFun =
        let bodyParser =
            Parsing.makeParser 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>41</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        fun (s : Parsing.Stream) ->
            let (Parsing.SubString(data, offset)) = s
            if data.Substring(offset).StartsWith("Vehicle") then
                let s = Parsing.SubString(data, offset + 7)
                bodyParser.Run s
            else
                Parsing.parseError("Expected 'Vehicle'", s)
        |> Parsing.ParserFun

    member this.AsString() : string =
        "Vehicle " + (Ast.dump this.Wrapped)

    static member Default : Vehicle =
        let value =
            Ast.defaultValue 
                (
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>41</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<ValueType>(reader)
                )
        Vehicle(value)

    static member AstType : Ast.ValueType =
        let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="SturmovikMission.DataProvider.Ast+ValueType"><value><Case>Composite</Case><Item><count>41</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="5" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="25" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="8" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="79" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></value></FsPickler>""")
        let serializer = XmlSerializer()
        serializer.Deserialize<ValueType>(reader)


/// Extraction of data from a mission or group file.
type GroupData(nodes : Ast.Data list) = 
    inherit GroupMembers(nodes)

    /// <summary>Parse a mission or group file and store the extracted data.</summary>
    /// <param name="s">The stream that is parsed</param>
    /// <exception cref="Parsing.ParseError">Failed to parse the mission or group</exception>
    static member Parse(s : Parsing.Stream) : GroupData =
        GroupData 
            (
                let parsers =
                    let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="Microsoft.FSharp.Collections.FSharpMap`2[System.String,SturmovikMission.DataProvider.Ast+ValueType]"><value><count>69</count><items flags="sequence"><elem><Item1>Airfield</Item1><Item2><Case>Composite</Case><Item><count>33</count><items flags="sequence"><elem><Item1>Callnum</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Chart</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="22" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Hydrodrome</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Planes</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="116" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ReturnPlanes</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Block</Item1><Item2><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="22" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Boolean</Item1><Item2 flags="cached" id="31" /></elem><elem><Item1>Boundary</Item1><Item2><Case>List</Case><Item><Case>FloatPair</Case></Item></Item2></elem><elem><Item1>Bridge</Item1><Item2><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="22" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Carriages</Item1><Item2><Case>List</Case><Item flags="cached" id="39" /></Item2></elem><elem><Item1>Chart</Item1><Item2 flags="cached" id="12" /></elem><elem><Item1>Countries</Item1><Item2><Case>List</Case><Item><Case>Pair</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /></Item></Item2></elem><elem><Item1>Countries_ValueType</Item1><Item2 flags="cached" id="290" /></elem><elem><Item1>Damaged</Item1><Item2 flags="cached" id="256" /></elem><elem><Item1>Date</Item1><Item2><Case>Date</Case></Item2></elem><elem><Item1>Effect</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Flag</Item1><Item2><Case>Composite</Case><Item><count>20</count><items flags="sequence"><elem><Item1>BlockThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountPlanes</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountVehicles</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpeedFactor</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartHeight</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Float</Item1><Item2 flags="cached" id="22" /></elem><elem><Item1>FloatPair</Item1><Item2 flags="cached" id="244" /></elem><elem><Item1>Ground</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>IntVector</Item1><Item2><Case>IntVector</Case></Item2></elem><elem><Item1>Integer</Item1><Item2 flags="cached" id="7" /></elem><elem><Item1>MCU_Activate</Item1><Item2><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_AttackArea</Item1><Item2><Case>Composite</Case><Item><count>17</count><items flags="sequence"><elem><Item1>AttackAir</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackArea</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGTargets</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGround</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_AttackTarget</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>AttackGroup</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Behaviour</Item1><Item2><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Filter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FloatParam</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Cover</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>CoverGroup</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Damage</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Damage</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Effect</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>ActionType</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Flare</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Color</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_ForceComplete</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EmergencyOrdnanceDrop</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Formation</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationDensity</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Land</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_TakeOff</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NoTaxiTakeoff</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CheckZone</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Zone</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Counter</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Counter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Dropcount</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_DateTime</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Config</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1 flags="cached" id="294" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DateTimeType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /><Item3 flags="cached" id="7" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Deactivate</Item1><Item2><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Delete</Item1><Item2><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Icon</Item1><Item2><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LineType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_ModifierAddVal</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_ModifierSetVal</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Proximity</Item1><Item2><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Distance</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Spawner</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpawnAtMe</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_CameraOperator</Item1><Item2><Case>Composite</Case><Item><count>21</count><items flags="sequence"><elem><Item1>CameraType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FOV</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FirstId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LockView</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SecondId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_ComplexTrigger</Item1><Item2><Case>Composite</Case><Item><count>43</count><items flags="sequence"><elem><Item1>CheckPlanes</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CheckVehicles</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>EventsFilterCriticallyDamaged</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDamaged</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDeliveredCargo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDropedBombs</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDroppedCargoContainers</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredSimple</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedSimple</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredFlare</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredRockets</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterKilled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftSimple</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperJumped</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperLandedAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterRepaired</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterSpawned</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterTookOff</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ObjectName</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>ObjectScript</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_Entity</Item1><Item2><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MisObjID</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnReports</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_InfluenceArea</Item1><Item2><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Boundary</Item1><Item2><Item1 flags="cached" id="243" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_Media</Item1><Item2><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ExpandTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FadeTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MediaType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Opacity</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TotalTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_MissionBegin</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_MissionEnd</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Succeeded</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_MissionObjective</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Coalition</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Success</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TaskType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_ServerInput</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_Subtitle</Item1><Item2><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Coalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SubtitleInfo</Item1><Item2><Item1><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Timer</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Random</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Waypoint</Item1><Item2><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Area</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Mask</Item1><Item2 flags="cached" id="116" /></elem><elem><Item1>OnEvent</Item1><Item2 flags="cached" id="1351" /></elem><elem><Item1>OnEvents</Item1><Item2 flags="cached" id="1347" /></elem><elem><Item1>OnReport</Item1><Item2 flags="cached" id="1267" /></elem><elem><Item1>OnReports</Item1><Item2 flags="cached" id="1263" /></elem><elem><Item1>Options</Item1><Item2><Case>Composite</Case><Item><count>28</count><items flags="sequence"><elem><Item1>AqmId</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudConfig</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudHeight</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudLevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Countries</Item1><Item2><Item1 flags="cached" id="289" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1 flags="cached" id="294" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Forests</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GuiMap</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HMap</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Haze</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCAuthor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Layers</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MissionType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MultiplayerPlaneConfig</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>PlayerConfig</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecLevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Pressure</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeaState</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeasonPrefix</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TempPressLevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Temperature</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Textures</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /><Item3 flags="cached" id="7" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Turbulence</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WindLayers</Item1><Item2><Item1><Case>List</Case><Item><Case>Triplet</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /><Item3 flags="cached" id="7" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Plane</Item1><Item2><Case>Composite</Case><Item><count>34</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AiRTBDecision</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="116" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Planes</Item1><Item2 flags="cached" id="56" /></elem><elem><Item1>Point</Item1><Item2 flags="cached" id="16" /></elem><elem><Item1>Ship</Item1><Item2><Case>Composite</Case><Item><count>25</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>String</Item1><Item2 flags="cached" id="39" /></elem><elem><Item1>SubtitleInfo</Item1><Item2 flags="cached" id="1512" /></elem><elem><Item1>Time</Item1><Item2 flags="cached" id="1664" /></elem><elem><Item1>Train</Item1><Item2><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Carriages</Item1><Item2><Item1 flags="cached" id="286" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Case>Composite</Case><Item><count>41</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="116" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>WindLayers</Item1><Item2 flags="cached" id="1669" /></elem><elem><Item1>WindLayers_ValueType</Item1><Item2 flags="cached" id="1670" /></elem></items></value></FsPickler>""")
                    let serializer = XmlSerializer()
                    serializer.Deserialize<Map<string, ValueType>>(reader)
                    |> Map.map (fun name valueType -> Parsing.makeParser valueType)
                let getParser name = parsers.[name]
                Parsing.parseFile getParser s
            )

    /// <summary>Get data from a subgroup</summary>
    /// <param name="name">Name of the subgroup</param>
    member this.GetGroup(name : string) : GroupData =
        GroupData 
            (
                this.Items
                |> List.collect (fun node -> node.FindByPath [name])
            )

    member this.ListOfAirfield : Airfield seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Airfield" then Some (Airfield(value)) else None)

    member this.ListOfBlock : Block seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Block" then Some (Block(value)) else None)

    member this.ListOfBridge : Bridge seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Bridge" then Some (Bridge(value)) else None)

    member this.ListOfEffect : Effect seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Effect" then Some (Effect(value)) else None)

    member this.ListOfFlag : Flag seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Flag" then Some (Flag(value)) else None)

    member this.ListOfGround : Ground seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Ground" then Some (Ground(value)) else None)

    member this.ListOfMCU_Activate : MCU_Activate seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Activate" then Some (MCU_Activate(value)) else None)

    member this.ListOfMCU_CMD_AttackArea : MCU_CMD_AttackArea seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_AttackArea" then Some (MCU_CMD_AttackArea(value)) else None)

    member this.ListOfMCU_CMD_AttackTarget : MCU_CMD_AttackTarget seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_AttackTarget" then Some (MCU_CMD_AttackTarget(value)) else None)

    member this.ListOfMCU_CMD_Behaviour : MCU_CMD_Behaviour seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Behaviour" then Some (MCU_CMD_Behaviour(value)) else None)

    member this.ListOfMCU_CMD_Cover : MCU_CMD_Cover seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Cover" then Some (MCU_CMD_Cover(value)) else None)

    member this.ListOfMCU_CMD_Damage : MCU_CMD_Damage seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Damage" then Some (MCU_CMD_Damage(value)) else None)

    member this.ListOfMCU_CMD_Effect : MCU_CMD_Effect seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Effect" then Some (MCU_CMD_Effect(value)) else None)

    member this.ListOfMCU_CMD_Flare : MCU_CMD_Flare seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Flare" then Some (MCU_CMD_Flare(value)) else None)

    member this.ListOfMCU_CMD_ForceComplete : MCU_CMD_ForceComplete seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_ForceComplete" then Some (MCU_CMD_ForceComplete(value)) else None)

    member this.ListOfMCU_CMD_Formation : MCU_CMD_Formation seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Formation" then Some (MCU_CMD_Formation(value)) else None)

    member this.ListOfMCU_CMD_Land : MCU_CMD_Land seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_Land" then Some (MCU_CMD_Land(value)) else None)

    member this.ListOfMCU_CMD_TakeOff : MCU_CMD_TakeOff seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CMD_TakeOff" then Some (MCU_CMD_TakeOff(value)) else None)

    member this.ListOfMCU_CheckZone : MCU_CheckZone seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_CheckZone" then Some (MCU_CheckZone(value)) else None)

    member this.ListOfMCU_Counter : MCU_Counter seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Counter" then Some (MCU_Counter(value)) else None)

    member this.ListOfMCU_DateTime : MCU_DateTime seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_DateTime" then Some (MCU_DateTime(value)) else None)

    member this.ListOfMCU_Deactivate : MCU_Deactivate seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Deactivate" then Some (MCU_Deactivate(value)) else None)

    member this.ListOfMCU_Delete : MCU_Delete seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Delete" then Some (MCU_Delete(value)) else None)

    member this.ListOfMCU_Icon : MCU_Icon seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Icon" then Some (MCU_Icon(value)) else None)

    member this.ListOfMCU_ModifierAddVal : MCU_ModifierAddVal seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_ModifierAddVal" then Some (MCU_ModifierAddVal(value)) else None)

    member this.ListOfMCU_ModifierSetVal : MCU_ModifierSetVal seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_ModifierSetVal" then Some (MCU_ModifierSetVal(value)) else None)

    member this.ListOfMCU_Proximity : MCU_Proximity seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Proximity" then Some (MCU_Proximity(value)) else None)

    member this.ListOfMCU_Spawner : MCU_Spawner seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Spawner" then Some (MCU_Spawner(value)) else None)

    member this.ListOfMCU_TR_CameraOperator : MCU_TR_CameraOperator seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_CameraOperator" then Some (MCU_TR_CameraOperator(value)) else None)

    member this.ListOfMCU_TR_ComplexTrigger : MCU_TR_ComplexTrigger seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_ComplexTrigger" then Some (MCU_TR_ComplexTrigger(value)) else None)

    member this.ListOfMCU_TR_Entity : MCU_TR_Entity seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_Entity" then Some (MCU_TR_Entity(value)) else None)

    member this.ListOfMCU_TR_InfluenceArea : MCU_TR_InfluenceArea seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_InfluenceArea" then Some (MCU_TR_InfluenceArea(value)) else None)

    member this.ListOfMCU_TR_Media : MCU_TR_Media seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_Media" then Some (MCU_TR_Media(value)) else None)

    member this.ListOfMCU_TR_MissionBegin : MCU_TR_MissionBegin seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_MissionBegin" then Some (MCU_TR_MissionBegin(value)) else None)

    member this.ListOfMCU_TR_MissionEnd : MCU_TR_MissionEnd seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_MissionEnd" then Some (MCU_TR_MissionEnd(value)) else None)

    member this.ListOfMCU_TR_MissionObjective : MCU_TR_MissionObjective seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_MissionObjective" then Some (MCU_TR_MissionObjective(value)) else None)

    member this.ListOfMCU_TR_ServerInput : MCU_TR_ServerInput seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_ServerInput" then Some (MCU_TR_ServerInput(value)) else None)

    member this.ListOfMCU_TR_Subtitle : MCU_TR_Subtitle seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_TR_Subtitle" then Some (MCU_TR_Subtitle(value)) else None)

    member this.ListOfMCU_Timer : MCU_Timer seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Timer" then Some (MCU_Timer(value)) else None)

    member this.ListOfMCU_Waypoint : MCU_Waypoint seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "MCU_Waypoint" then Some (MCU_Waypoint(value)) else None)

    member this.ListOfOptions : Options seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Options" then Some (Options(value)) else None)

    member this.ListOfPlane : Plane seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Plane" then Some (Plane(value)) else None)

    member this.ListOfShip : Ship seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Ship" then Some (Ship(value)) else None)

    member this.ListOfTrain : Train seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Train" then Some (Train(value)) else None)

    member this.ListOfVehicle : Vehicle seq =
        this.Items
        |> Seq.collect (fun data -> data.GetLeaves())
        |> Seq.choose (fun (name, value) -> if name = "Vehicle" then Some (Vehicle(value)) else None)

    member this.CreateMcuList() : Mcu.McuBase list =
        let valueTypeOfName =
            let reader = new System.IO.StringReader("""<?xml version="1.0" encoding="utf-16"?><FsPickler version="4.0.0.0" type="Microsoft.FSharp.Collections.FSharpMap`2[System.String,SturmovikMission.DataProvider.Ast+ValueType]"><value><count>69</count><items flags="sequence"><elem><Item1>Airfield</Item1><Item2><Case>Composite</Case><Item><count>33</count><items flags="sequence"><elem><Item1>Callnum</Item1><Item2><Item1><Case>Integer</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Chart</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>Point</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>X</Item1><Item2><Item1><Case>Float</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Y</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1><Case>Boolean</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="22" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1><Case>String</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Hydrodrome</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Planes</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>Plane</Item1><Item2><Item1><Case>Composite</Case><Item><count>27</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AIRTBDecision</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Altitude</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RouteTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1><Case>Mask</Case></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Item1><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvMods</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvPayloads</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AvSkins</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Number</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RenewTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Renewable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SetIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColors</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="116" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ReturnPlanes</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Block</Item1><Item2><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="22" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Boolean</Item1><Item2 flags="cached" id="31" /></elem><elem><Item1>Boundary</Item1><Item2><Case>List</Case><Item><Case>FloatPair</Case></Item></Item2></elem><elem><Item1>Bridge</Item1><Item2><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Damaged</Item1><Item2><Item1><Case>Mapping</Case><Item flags="cached" id="22" /></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Durability</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Carriages</Item1><Item2><Case>List</Case><Item flags="cached" id="39" /></Item2></elem><elem><Item1>Chart</Item1><Item2 flags="cached" id="12" /></elem><elem><Item1>Countries</Item1><Item2><Case>List</Case><Item><Case>Pair</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /></Item></Item2></elem><elem><Item1>Countries_ValueType</Item1><Item2 flags="cached" id="290" /></elem><elem><Item1>Damaged</Item1><Item2 flags="cached" id="256" /></elem><elem><Item1>Date</Item1><Item2><Case>Date</Case></Item2></elem><elem><Item1>Effect</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Flag</Item1><Item2><Case>Composite</Case><Item><count>20</count><items flags="sequence"><elem><Item1>BlockThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountPlanes</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CountVehicles</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpeedFactor</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartHeight</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Float</Item1><Item2 flags="cached" id="22" /></elem><elem><Item1>FloatPair</Item1><Item2 flags="cached" id="244" /></elem><elem><Item1>Ground</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>IntVector</Item1><Item2><Case>IntVector</Case></Item2></elem><elem><Item1>Integer</Item1><Item2 flags="cached" id="7" /></elem><elem><Item1>MCU_Activate</Item1><Item2><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_AttackArea</Item1><Item2><Case>Composite</Case><Item><count>17</count><items flags="sequence"><elem><Item1>AttackAir</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackArea</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGTargets</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AttackGround</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_AttackTarget</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>AttackGroup</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Behaviour</Item1><Item2><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Filter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FloatParam</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Cover</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>CoverGroup</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Damage</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Damage</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Effect</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>ActionType</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Flare</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Color</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_ForceComplete</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EmergencyOrdnanceDrop</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Formation</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationDensity</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FormationType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_Land</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CMD_TakeOff</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NoTaxiTakeoff</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_CheckZone</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Zone</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Counter</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Counter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Dropcount</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_DateTime</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Config</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1 flags="cached" id="294" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DateTimeType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /><Item3 flags="cached" id="7" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Deactivate</Item1><Item2><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Delete</Item1><Item2><Case>Composite</Case><Item><count>11</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Icon</Item1><Item2><Case>Composite</Case><Item><count>18</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LineType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_ModifierAddVal</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_ModifierSetVal</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Data0</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data1</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data2</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Data3</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ParamIndex</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Proximity</Item1><Item2><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Closer</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Distance</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PlaneCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VehicleCoalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Spawner</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SpawnAtMe</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_CameraOperator</Item1><Item2><Case>Composite</Case><Item><count>21</count><items flags="sequence"><elem><Item1>CameraType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Coalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FOV</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FirstId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LockView</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SecondId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_ComplexTrigger</Item1><Item2><Case>Composite</Case><Item><count>43</count><items flags="sequence"><elem><Item1>CheckPlanes</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CheckVehicles</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Cylinder</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>EventsFilterCriticallyDamaged</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDamaged</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDeliveredCargo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDropedBombs</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterDroppedCargoContainers</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterEnteredSimple</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedSimple</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFinishedStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredFlare</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterFiredRockets</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterKilled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterLeftSimple</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperJumped</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterParatrooperLandedAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterRepaired</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterSpawned</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterStationaryAndAlive</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>EventsFilterTookOff</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ObjectName</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>ObjectScript</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>Zero</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Radius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_Entity</Item1><Item2><Case>Composite</Case><Item><count>15</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MisObjID</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnReports</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnReport</Item1><Item2><Item1><Case>Composite</Case><Item><count>3</count><items flags="sequence"><elem><Item1>CmdId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_InfluenceArea</Item1><Item2><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Boundary</Item1><Item2><Item1 flags="cached" id="243" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_Media</Item1><Item2><Case>Composite</Case><Item><count>22</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Config</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ExpandTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FadeTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MediaType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>OnEvents</Item1><Item2><Item1><Case>Composite</Case><Item><count>1</count><items flags="sequence"><elem><Item1>OnEvent</Item1><Item2><Item1><Case>Composite</Case><Item><count>2</count><items flags="sequence"><elem><Item1>TarId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Type</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Opacity</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TotalTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_MissionBegin</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_MissionEnd</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Succeeded</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_MissionObjective</Item1><Item2><Case>Composite</Case><Item><count>16</count><items flags="sequence"><elem><Item1>Coalition</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>IconType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Success</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TaskType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_ServerInput</Item1><Item2><Case>Composite</Case><Item><count>12</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_TR_Subtitle</Item1><Item2><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Coalitions</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Enabled</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SubtitleInfo</Item1><Item2><Item1><Case>Composite</Case><Item><count>8</count><items flags="sequence"><elem><Item1>BColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Duration</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>FontSize</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HAlign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCText</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RColor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>VAlign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Timer</Item1><Item2><Case>Composite</Case><Item><count>13</count><items flags="sequence"><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Random</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>MCU_Waypoint</Item1><Item2><Case>Composite</Case><Item><count>14</count><items flags="sequence"><elem><Item1>Area</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Objects</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Priority</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Speed</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Targets</Item1><Item2><Item1 flags="cached" id="397" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Mask</Item1><Item2 flags="cached" id="116" /></elem><elem><Item1>OnEvent</Item1><Item2 flags="cached" id="1351" /></elem><elem><Item1>OnEvents</Item1><Item2 flags="cached" id="1347" /></elem><elem><Item1>OnReport</Item1><Item2 flags="cached" id="1267" /></elem><elem><Item1>OnReports</Item1><Item2 flags="cached" id="1263" /></elem><elem><Item1>Options</Item1><Item2><Case>Composite</Case><Item><count>28</count><items flags="sequence"><elem><Item1>AqmId</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudConfig</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudHeight</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CloudLevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Countries</Item1><Item2><Item1 flags="cached" id="289" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Date</Item1><Item2><Item1 flags="cached" id="294" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Forests</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>GuiMap</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>HMap</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Haze</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCAuthor</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCDesc</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LCName</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Layers</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MissionType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MultiplayerPlaneConfig</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>Multiple</Case></Item3></Item2></elem><elem><Item1>PlayerConfig</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecLevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PrecType</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Pressure</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeaState</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>SeasonPrefix</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TempPressLevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Temperature</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Textures</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1><Case>Triplet</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /><Item3 flags="cached" id="7" /></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Turbulence</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WindLayers</Item1><Item2><Item1><Case>List</Case><Item><Case>Triplet</Case><Item1 flags="cached" id="7" /><Item2 flags="cached" id="7" /><Item3 flags="cached" id="7" /></Item></Item1><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Plane</Item1><Item2><Case>Composite</Case><Item><count>34</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>AiRTBDecision</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>StartInAir</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Time</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="116" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Planes</Item1><Item2 flags="cached" id="56" /></elem><elem><Item1>Point</Item1><Item2 flags="cached" id="16" /></elem><elem><Item1>Ship</Item1><Item2><Case>Composite</Case><Item><count>25</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>String</Item1><Item2 flags="cached" id="39" /></elem><elem><Item1>SubtitleInfo</Item1><Item2 flags="cached" id="1512" /></elem><elem><Item1>Time</Item1><Item2 flags="cached" id="1664" /></elem><elem><Item1>Train</Item1><Item2><Case>Composite</Case><Item><count>24</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Carriages</Item1><Item2><Item1 flags="cached" id="286" /><Item2><Case>Zero</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>Vehicle</Item1><Item2><Case>Composite</Case><Item><count>41</count><items flags="sequence"><elem><Item1>AILevel</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>BeaconChannel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callnum</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Callsign</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>CoopStart</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Country</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageReport</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DamageThreshold</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>DeleteAfterDeath</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Desc</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Engageable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Fuel</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Index</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LimitAmmo</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>LinkTrId</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>MaintenanceRadius</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Model</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Name</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>NumberInFormation</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>PayloadId</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RearmTime</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RefuelTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RehealTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairFriendlies</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>RepairTime</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Script</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Skin</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Spotter</Item1><Item2><Item1 flags="cached" id="7" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCode</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>TCodeColor</Item1><Item2><Item1 flags="cached" id="39" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>Vulnerable</Item1><Item2><Item1 flags="cached" id="31" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>WMMask</Item1><Item2><Item1 flags="cached" id="116" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>XPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>YPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZOri</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem><elem><Item1>ZPos</Item1><Item2><Item1 flags="cached" id="22" /><Item2><Case>MinOne</Case></Item2><Item3><Case>MaxOne</Case></Item3></Item2></elem></items></Item></Item2></elem><elem><Item1>WindLayers</Item1><Item2 flags="cached" id="1669" /></elem><elem><Item1>WindLayers_ValueType</Item1><Item2 flags="cached" id="1670" /></elem></items></value></FsPickler>""")
            let serializer = XmlSerializer()
            serializer.Deserialize<Map<string, ValueType>>(reader)
        let mcuMakerOfName =
            valueTypeOfName
            |> Map.map (fun name vt -> McuFactory.tryMakeMcu(name, vt))
        this.Items
        |> List.collect (fun data -> data.GetLeavesWithPath())
        |> List.choose (fun (path, name, value) ->
            match Map.tryFind name mcuMakerOfName with
            | Some(Some(make)) -> Some(make(value, path))
            | _ -> None
        )
