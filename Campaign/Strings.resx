<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackAt" xml:space="preserve">
    <value>%s is back at %s</value>
  </data>
  <data name="BadSupplyMissionStart" xml:space="preserve">
    <value>This airfield is not a good place to start a supply mission from</value>
  </data>
  <data name="CargoDelivered" xml:space="preserve">
    <value>%s has delivered %0.0f Kg of cargo to %s</value>
  </data>
  <data name="Crashed" xml:space="preserve">
    <value>%s has crashed</value>
  </data>
  <data name="CrashedNear" xml:space="preserve">
    <value>%s has crashed near %s</value>
  </data>
  <data name="EnemyLanded" xml:space="preserve">
    <value>%s (an enemy!) has landed at %s</value>
  </data>
  <data name="EnteredPlane" xml:space="preserve">
    <value>%s entered a %s from %s (%d left)</value>
  </data>
  <data name="FreshSpawns" xml:space="preserve">
    <value>Fresh spawns at rear AF: F:%0.1f+%0.1f A:%0.1f B:%0.1f T:%0.1f</value>
  </data>
  <data name="FreshSpawnsExhausted" xml:space="preserve">
    <value>You have exhausted all your fresh spawns; They refill partially every new mission</value>
  </data>
  <data name="FreshSpawnsExhaustedAlt" xml:space="preserve">
    <value>You have exhausted your fresh spawns in that plane, try one of the following instead: %s</value>
  </data>
  <data name="GiftFromPlayer" xml:space="preserve">
    <value>You have been gifted a %s at %s by %s</value>
  </data>
  <data name="GiftToPlayer" xml:space="preserve">
    <value>You have gifted a %s to %s at %s</value>
  </data>
  <data name="GiftToPublic" xml:space="preserve">
    <value>%s has gifted a %s to the public at %s</value>
  </data>
  <data name="Hours" xml:space="preserve">
    <value>%d hours</value>
  </data>
  <data name="InsufficientSupplies" xml:space="preserve">
    <value>Airfield supplies are no longer sufficient to provide this loadout</value>
  </data>
  <data name="KickNoBan" xml:space="preserve">
    <value>You are being kicked for %s. This is not a ban, you are welcome back.</value>
  </data>
  <data name="LandedInTheRough" xml:space="preserve">
    <value>%s landed in the rough</value>
  </data>
  <data name="LandingViolation" xml:space="preserve">
    <value>landing on an enemy airfield</value>
  </data>
  <data name="Minutes" xml:space="preserve">
    <value>%d minutes</value>
  </data>
  <data name="NoSelfGift" xml:space="preserve">
    <value>You cannot gift a plane to yourself</value>
  </data>
  <data name="NotAReservedPlane" xml:space="preserve">
    <value>This is not one of your reserved planes.</value>
  </data>
  <data name="PlaneAvailableAgain" xml:space="preserve">
    <value>%s available at %s again</value>
  </data>
  <data name="PlaneReservedByOther" xml:space="preserve">
    <value>Another pilot has reserved that plane; Bring one from the rear airfield to earn a reservation</value>
  </data>
  <data name="RearSpawnAdvice" xml:space="preserve">
    <value>You should consider taking off from the REAR airfield to reserve a new plane.</value>
  </data>
  <data name="ReservedPlanes" xml:space="preserve">
    <value>Your reserved planes at %s: %s</value>
  </data>
  <data name="ScarceTakeOff" xml:space="preserve">
    <value>%s has taken a scarcely available %s at %s</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>%d seconds</value>
  </data>
  <data name="SupplyMissionAdvice" xml:space="preserve">
    <value>The following regions would benefit from resupplies:</value>
  </data>
  <data name="TakeOff" xml:space="preserve">
    <value>%s has taken off from %s in a %s</value>
  </data>
  <data name="TakeOffCleared" xml:space="preserve">
    <value>%s, you are cleared to take off in your %s from %s</value>
  </data>
  <data name="TakeOffClearedAlt" xml:space="preserve">
    <value>%s, you are cleared to take off in a %s from %s</value>
  </data>
  <data name="TakeOffDenied" xml:space="preserve">
    <value>%s, you are not allowed to take off in a %s at %s</value>
  </data>
  <data name="TakeOffKickWarning" xml:space="preserve">
    <value>You will be KICKED if you take off</value>
  </data>
  <data name="TimeLeft" xml:space="preserve">
    <value>Time left in mission: %s</value>
  </data>
  <data name="TookLastPlane" xml:space="preserve">
    <value>%s took the last %s from %s</value>
  </data>
  <data name="UnauthorizedTakeOff" xml:space="preserve">
    <value>unauthorized take off</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome back %s</value>
  </data>
</root>