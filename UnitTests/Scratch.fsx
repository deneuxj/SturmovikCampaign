#r "nuget: FSharp.Charting"
#r "nuget: SturmovikMission.DataProvider"
#r "System.Windows.Forms.DataVisualization"

open FSharp.Charting
open SturmovikMission.DataProvider.Parsing

let (|AsNum|_|) =
    function
    | ReFloat(x, s) -> Some(x, s)
    | ReInt(n, s) -> Some(float n, s)
    | _ -> None

let (|AsVector2|_|) s =
    match s with
    | ReLit "<" (AsNum(x, ReLit "," (AsNum(y, ReLit ">" s)))) ->
        Some((x, y), s)
    | _ ->
        None

let (|AsList|_|) inner s =
    match s with
    | ReLit "[" s ->
        let rec work s =
            match inner s with
            | Some(v, s) ->
                match s with
                | ReLit "]" s ->
                    Some([v], s)
                | ReLit ";" s ->
                    match work s with
                    | Some(vs, s) -> Some (v :: vs, s)
                    | _ -> None
                | _ ->
                    None
            | _ -> None
        match s with
        | ReLit "]" s ->
            Some([], s)
        | _ ->
            work s
    | _ ->
        None

let (|AsVectors|_|) =
    let inner = function AsVector2(v, s) -> Some(v, s) | _ -> None
    function
    | AsList inner (vs, s) -> Some (vs, s)
    | _ -> None

let (|AsPolygon|_|) s =
    match s with
    | AsVectors(vs, s) ->
        match vs with
        | [] -> None
        | _ -> Some(List.last vs :: vs, s)
    | _ ->
        None

let (|AsPolygons|_|) =
    let inner = function AsPolygon(poly, s) -> Some(poly, s) | _ -> None
    function
    | AsList inner (polygons, s) -> Some(polygons, s)
    | _ -> None

let (|AsTestData|_|) s =
    match s with
    | AsPolygons(polygons, ReLit "," (ReInt(seed, ReLit "," (AsPolygon(subShape, s))))) ->
        Some((polygons, seed, subShape), s)
    | _ ->
        None

let (|AsDebugData|_|) s =
    match s with
    | ReLit "("
        (AsPolygons(
            candidates,
            ReLit ","
                (AsPolygons(
                    qt,
                    ReLit ","
                        (AsPolygons(fa1, (ReLit "," (AsPolygons(fa2, ReLit ")" _))))))))) ->
        Some((candidates, qt, fa1, fa2), s)
    | _ ->
        None

let s =
    Stream.FromString """
[[<69.49, 16.31>; <64.45, 42.89>; <42.489998, 36.71>; <46.809998, 20.27>];
[<50.89, 46.34>; <62.29, 54.8>; <74.29, 74.39>; <48.55, 74.36>;
 <48.13, 52.309998>];
[<68.29, 75.99>; <72.82, 91.44>; <71.47, 92.58>; <61.3, 100.17>;
 <49.78, 97.29>; <52.96, 88.74>];
[<32.19, 98.3>; <42.36, 100.31>; <46.620003, 108.89>; <35.7, 113.33>;
 <27.27, 102.23>];
[<24.62, 88.990005>; <38, 97.12>; <48.800003, 105.22>; <48.140003, 107.26>;
 <38.75, 108.130005>; <30.14, 105.100006>; <23.6, 90.490005>];
[<102.189995, 25.390001>; <116.89, 28.09>; <120.7, 29.230001>;
 <113.71, 53.410004>; <95.2, 49.57>; <93.85, 43.99>];
[<105.770004, 77.61>; <107.81, 85.05>; <101.87, 90.81>; <91.76, 92.130005>;
 <91.07, 89.43>];
[<29.690002, 99.649994>; <32, 107.299995>; <20.480001, 116.03>;
 <18.920002, 100.369995>]], 799110987,
     [<50.370003, 53.01>; <50.850002, 54.03>; <44.28, 74.1>; <35.940002, 62.67>;
<34.38, 55.29>]
"""

let c =
    Stream.FromString """
([[<39.940273, 84.66>; <38.475807, 88.19554>; <34.940273, 89.66>;
<31.40474, 88.19554>; <29.940273, 84.66>; <31.40474, 81.124466>;
<34.940273, 79.66>; <38.475807, 81.12447>; <39.940273, 84.66>];
      [<40.369164, 80.400116>; <38.904697, 83.93565>; <35.369164, 85.400116>;
<31.83363, 83.93565>; <30.369164, 80.400116>; <31.83363, 76.86458>;
<35.369164, 75.400116>; <38.904697, 76.864586>; <40.369164, 80.400116>];
      [<33.636337, 84.058304>; <32.171875, 87.59384>; <28.63634, 89.058304>;
<25.100805, 87.59384>; <23.63634, 84.058304>; <25.100805, 80.522766>;
<28.63634, 79.058304>; <32.171875, 80.52277>; <33.636337, 84.058304>];
      [<42.96824, 54.433167>; <41.503773, 57.9687>; <37.96824, 59.433167>;
<34.432705, 57.9687>; <32.96824, 54.433167>; <34.432705, 50.897633>;
<37.96824, 49.433167>; <41.503773, 50.897633>; <42.96824, 54.433167>];
      [<32.05007, 85.58142>; <30.585606, 89.11696>; <27.050072, 90.58142>;
<23.514538, 89.11696>; <22.050072, 85.58142>; <23.514538, 82.04588>;
<27.050072, 80.58142>; <30.585608, 82.04589>; <32.05007, 85.58142>];
      [<40.694885, 72.023>; <39.23042, 75.55853>; <35.694885, 77.023>;
<32.15935, 75.55853>; <30.694885, 72.023>; <32.15935, 68.487465>;
<35.694885, 67.023>; <39.23042, 68.48747>; <40.694885, 72.023>];
      [<42.20644, 50.97472>; <40.741974, 54.510254>; <37.20644, 55.97472>;
<33.670906, 54.510254>; <32.20644, 50.97472>; <33.670906, 47.439186>;
<37.20644, 45.97472>; <40.741974, 47.439186>; <42.20644, 50.97472>];
      [<32.967354, 79.74476>; <31.502888, 83.28029>; <27.967354, 84.74476>;
<24.43182, 83.28029>; <22.967354, 79.74476>; <24.43182, 76.20922>;
<27.967354, 74.74476>; <31.50289, 76.20923>; <32.967354, 79.74476>];
      [<40.63869, 85.54924>; <39.174225, 89.08478>; <35.63869, 90.54924>;
<32.103157, 89.08478>; <30.63869, 85.54924>; <32.103157, 82.0137>;
<35.63869, 80.54924>; <39.174225, 82.01371>; <40.63869, 85.54924>];
      [<32.530724, 84.026215>; <31.06626, 87.56175>; <27.530725, 89.026215>;
<23.995192, 87.56175>; <22.530725, 84.026215>; <23.995192, 80.49068>;
<27.530725, 79.026215>; <31.066261, 80.490685>; <32.530724, 84.026215>]],
     [[<18.920002, 16.31>;<44.364998, 16.31>;<44.364998, 41.239998>;<18.920002, 41.239998>];[<18.920002, 41.239998>;<44.364998, 41.239998>;<44.364998, 66.17>;<18.920002, 66.17>];[<44.364998, 16.31>;<69.81, 16.31>;<69.81, 41.239998>;<44.364998, 41.239998>];[<44.364998, 41.239998>;<57.087498, 41.239998>;<57.087498, 53.704998>;<44.364998, 53.704998>];[<44.364998, 53.704998>;<57.087498, 53.704998>;<57.087498, 66.17>;<44.364998, 66.17>];[<57.087498, 41.239998>;<63.448746, 41.239998>;<63.448746, 47.472496>;<57.087498, 47.472496>];[<57.087498, 47.472496>;<63.448746, 47.472496>;<63.448746, 53.704998>;<57.087498, 53.704998>];[<63.448746, 41.239998>;<69.81, 41.239998>;<69.81, 47.472496>;<63.448746, 47.472496>];[<63.448746, 47.472496>;<69.81, 47.472496>;<69.81, 53.704998>;<63.448746, 53.704998>];[<57.087498, 53.704998>;<69.81, 53.704998>;<69.81, 66.17>;<57.087498, 66.17>];[<18.920002, 66.17>;<44.364998, 66.17>;<44.364998, 91.1>;<18.920002, 91.1>];[<18.920002, 91.1>;<44.364998, 91.1>;<44.364998, 116.03>;<18.920002, 116.03>];[<44.364998, 66.17>;<69.81, 66.17>;<69.81, 91.1>;<44.364998, 91.1>];[<44.364998, 91.1>;<69.81, 91.1>;<69.81, 116.03>;<44.364998, 116.03>];[<69.81, 16.31>;<120.7, 16.31>;<120.7, 66.17>;<69.81, 66.17>];[<69.81, 66.17>;<120.7, 66.17>;<120.7, 116.03>;<69.81, 116.03>]],
     [[<18.920002, 41.239998>;<44.364998, 41.239998>;<44.364998, 66.17>;<18.920002, 66.17>];[<63.448746, 47.472496>;<69.81, 47.472496>;<69.81, 53.704998>;<63.448746, 53.704998>];[<18.920002, 66.17>;<44.364998, 66.17>;<44.364998, 91.1>;<18.920002, 91.1>];[<44.364998, 91.1>;<69.81, 91.1>;<69.81, 116.03>;<44.364998, 116.03>]],
     [[<18.920002, 41.239998>;<31.6425, 41.239998>;<31.6425, 53.704998>;<18.920002, 53.704998>];[<18.920002, 53.704998>;<31.6425, 53.704998>;<31.6425, 66.17>;<18.920002, 66.17>];[<31.6425, 41.239998>;<44.364998, 41.239998>;<44.364998, 53.704998>;<31.6425, 53.704998>];[<31.6425, 53.704998>;<38.00375, 53.704998>;<38.00375, 59.9375>;<31.6425, 59.9375>];[<31.6425, 59.9375>;<34.823124, 59.9375>;<34.823124, 63.05375>;<31.6425, 63.05375>];[<31.6425, 63.05375>;<34.823124, 63.05375>;<34.823124, 66.17>;<31.6425, 66.17>];[<38.00375, 53.704998>;<44.364998, 53.704998>;<44.364998, 59.9375>;<38.00375, 59.9375>];[<38.00375, 59.9375>;<44.364998, 59.9375>;<44.364998, 66.17>;<38.00375, 66.17>];[<63.448746, 47.472496>;<69.81, 47.472496>;<69.81, 53.704998>;<63.448746, 53.704998>];[<18.920002, 66.17>;<31.6425, 66.17>;<31.6425, 78.634995>;<18.920002, 78.634995>];[<18.920002, 78.634995>;<31.6425, 78.634995>;<31.6425, 91.1>;<18.920002, 91.1>];[<31.6425, 66.17>;<38.00375, 66.17>;<38.00375, 72.4025>;<31.6425, 72.4025>];[<31.6425, 72.4025>;<38.00375, 72.4025>;<38.00375, 78.634995>;<31.6425, 78.634995>];[<38.00375, 66.17>;<44.364998, 66.17>;<44.364998, 72.4025>;<38.00375, 72.4025>];[<38.00375, 72.4025>;<41.184372, 72.4025>;<41.184372, 75.518745>;<38.00375, 75.518745>];[<38.00375, 75.518745>;<41.184372, 75.518745>;<41.184372, 78.634995>;<38.00375, 78.634995>];[<41.184372, 75.518745>;<44.364998, 75.518745>;<44.364998, 78.634995>;<41.184372, 78.634995>];[<31.6425, 78.634995>;<44.364998, 78.634995>;<44.364998, 91.1>;<31.6425, 91.1>];[<44.364998, 91.1>;<69.81, 91.1>;<69.81, 116.03>;<44.364998, 116.03>]])

"""

match c with
| ReLit "("
    (AsPolygons(_, ReLit "," (AsPolygons(_, _)))) ->
        printfn "yay"
| _ ->
    printfn "boo"

match s, c with
| AsTestData((polys, _, shape), _), AsDebugData((candidates, qt, fa1, fa2), _) ->
    let polys =
        polys
        |> List.map (fun poly -> Chart.Line(poly, Color=System.Drawing.Color.Blue))
    let shape =
        Chart.Line(shape, Color=System.Drawing.Color.Red)
    let candidates =
        candidates
        |> List.map (fun poly -> Chart.Line(poly, Color=System.Drawing.Color.DarkGray))
    let bb =
        fa1
        |> List.map (fun poly -> Chart.Line(poly, Color=System.Drawing.Color.Green))
    Chart.Combine(shape :: polys @ candidates @ bb).ShowChart()
| _ ->
    failwith "Failed to parse test data"